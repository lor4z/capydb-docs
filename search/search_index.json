{"config":{"lang":["pt","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CapyDb CLI","text":"<p>Uma ferramenta de linha de comando para gerenciamento de migrations de banco de dados com Liquibase e Entity Framework Core.</p>"},{"location":"#o-que-e-o-capydb","title":"\ud83d\ude80 O que \u00e9 o CapyDb?","text":"<p>O CapyDb CLI resolve o problema de gerenciar migrations de banco de dados de forma consistente e eficiente, oferecendo:</p> <ul> <li>\u2705 Detec\u00e7\u00e3o autom\u00e1tica de configura\u00e7\u00e3o - busca automaticamente por <code>liquibase.properties</code></li> <li>\u2705 Cria\u00e7\u00e3o de migrations no formato Liquibase YAML</li> <li>\u2705 Importa\u00e7\u00e3o de migrations do Entity Framework Core</li> <li>\u2705 Merge e consolida\u00e7\u00e3o de schemas automatizada</li> <li>\u2705 Execu\u00e7\u00e3o segura com planos de execu\u00e7\u00e3o SQL</li> <li>\u2705 Suporte multi-SGBD (SQL Server, PostgreSQL, MySQL, Oracle)</li> <li>\u2705 Integra\u00e7\u00e3o com Docker e pipelines CI/CD</li> <li>\u2705 Detec\u00e7\u00e3o de drift - identifica mudan\u00e7as n\u00e3o documentadas</li> <li>\u2705 Sistema de tags - cria\u00e7\u00e3o e remo\u00e7\u00e3o de tags para versionamento</li> <li>\u2705 Rollback inteligente - reverter por contagem ou at\u00e9 uma tag espec\u00edfica</li> <li>\u2705 Squash de hist\u00f3rico - consolida migrations antigas</li> <li>\u2705 Detec\u00e7\u00e3o autom\u00e1tica de autor via Git/CI/CD</li> <li>\u2705 Diagn\u00f3stico completo com <code>cap doctor</code></li> <li>\u2705 Valida\u00e7\u00e3o de changelog antes da execu\u00e7\u00e3o</li> <li>\u2705 Conversor de INSERTs - converte INSERTs SQL em formato Liquibase</li> </ul>"},{"location":"#instalacao","title":"\ud83d\udce6 Instala\u00e7\u00e3o","text":""},{"location":"#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>.NET 8.0 SDK ou superior</li> <li>Java 8+ (para Liquibase)</li> </ul>"},{"location":"#instalacao-global","title":"Instala\u00e7\u00e3o Global","text":"<pre><code># Instalar via NuGet\ndotnet tool install -g capydb.cli\n\n# Verificar instala\u00e7\u00e3o\ncap --version  # 1.0.7\n</code></pre>"},{"location":"#comecando","title":"\ud83c\udfc1 Come\u00e7ando","text":""},{"location":"#1-configurar-projeto","title":"1. Configurar Projeto","text":"<pre><code># Estrutura recomendada\nmeu-projeto/\n\u251c\u2500\u2500 db/\n\u2502   \u2514\u2500\u2500 changelog/\n\u2502       \u251c\u2500\u2500 common/\n\u2502       \u251c\u2500\u2500 db.changelog-master.yaml\n\u2502       \u2514\u2500\u2500 liquibase.properties  # \u2190 O CLI busca automaticamente aqui!\n\u251c\u2500\u2500 src/\n\u2514\u2500\u2500 Infrastructure/  # Ou qualquer estrutura de projeto\n</code></pre>"},{"location":"#2-verificar-pre-requisitos","title":"2. Verificar Pr\u00e9-requisitos","text":"<pre><code>cap doctor\n</code></pre>"},{"location":"#3-criar-primeira-migration","title":"3. Criar Primeira Migration","text":"<pre><code># Criar migration b\u00e1sica\ncap migrations add criar-usuarios\n\n# Com autor espec\u00edfico\ncap migrations add criar-produtos --author \"Seu Nome\"\n</code></pre>"},{"location":"#4-importar-do-entity-framework","title":"4. Importar do Entity Framework","text":"<pre><code>cap migrations import-ef \\\n  --assembly ./MeuApp.dll \\\n  --name CreateUsersTable \\\n  --provider sqlserver\n</code></pre>"},{"location":"#5-executar-migrations-deteccao-automatica","title":"5. Executar Migrations (Detec\u00e7\u00e3o Autom\u00e1tica!)","text":"<pre><code># O CLI busca automaticamente em ./db/changelog/liquibase.properties\ncap plan      # Gerar plano de execu\u00e7\u00e3o\ncap apply     # Aplicar migrations\ncap status    # Ver status do banco\n\n# Criar tag ap\u00f3s deployment\ncap tag v1.0.0\n\n# Rollback se necess\u00e1rio\ncap rollback count 2\ncap rollback to-tag v1.0.0\n</code></pre>"},{"location":"#deteccao-automatica-de-configuracao-aprimorada","title":"\ud83d\udca1 Detec\u00e7\u00e3o Autom\u00e1tica de Configura\u00e7\u00e3o (Aprimorada!)","text":"<p>O CLI agora possui busca recursiva robusta para <code>liquibase.properties</code>:</p> <p>Prioridade de Busca: 1. <code>./db/changelog/liquibase.properties</code> (recomendado) 2. <code>./liquibase.properties</code> (diret\u00f3rio raiz) 3. <code>./config/liquibase.properties</code> 4. <code>./database/liquibase.properties</code> 5. <code>./src/*/db/changelog/liquibase.properties</code> (monorepos!) 6. <code>./apps/*/db/changelog/liquibase.properties</code> (monorepos!) 7. Busca recursiva em todos os subdiret\u00f3rios (excluindo node_modules, .git)</p> <p>Funciona perfeitamente no Windows, Linux e macOS!</p> <pre><code># Antes (ainda funciona):\ncap apply --defaults ./db/changelog/liquibase.properties\n\n# Agora (ainda mais simples):\ncap apply  # Detecta automaticamente em monorepos, estruturas aninhadas, qualquer lugar!\n</code></pre>"},{"location":"#exemplos-rapidos","title":"\ud83d\udccb Exemplos R\u00e1pidos","text":""},{"location":"#estrutura-de-projeto-recomendada","title":"Estrutura de Projeto Recomendada","text":"<pre><code>meu-projeto/\n\u251c\u2500\u2500 db/\n\u2502   \u251c\u2500\u2500 changelog/\n\u2502   \u2502   \u251c\u2500\u2500 common/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 20250924_120000__criar-usuarios.yaml\n\u2502   \u2502   \u251c\u2500\u2500 db.changelog-master.yaml\n\u2502   \u2502   \u2514\u2500\u2500 liquibase.properties  # \u2190 Detectado automaticamente!\n\u2502   \u2514\u2500\u2500 drivers/\n\u2514\u2500\u2500 src/\n</code></pre>"},{"location":"#migration-gerada-automaticamente","title":"Migration Gerada Automaticamente","text":"<pre><code># db/changelog/common/20250924_120000__criar-usuarios.yaml\ndatabaseChangeLog:\n  - changeSet:\n      id: 20250924_120000-criar-usuarios\n      author: Evellyn Fernandes  # \u2190 Detectado via Git!\n      context: common\n      changes:\n        - createTable:\n            tableName: usuarios\n            columns:\n              - column:\n                  name: id\n                  type: int\n                  constraints:\n                    primaryKey: true\n</code></pre>"},{"location":"#fluxo-completo-simplificado","title":"Fluxo Completo Simplificado","text":"<pre><code># 1. Criar migration\ncap migrations add criar-usuarios\n\n# 2. Revisar o que vai ser executado\ncap plan\n\n# 3. Aplicar no banco\ncap apply\n\n# 4. Verificar status\ncap status\n\n# 5. Criar tag de vers\u00e3o\ncap tag v1.0.0\n\n# 6. Se precisar reverter\ncap rollback to-tag v1.0.0\n</code></pre>"},{"location":"#multiplos-ambientes-e-sgbds","title":"M\u00faltiplos Ambientes e SGBDs","text":"<pre><code># Ambiente padr\u00e3o (detecta automaticamente)\ncap apply\n\n# PostgreSQL com arquivo customizado\ncap apply --defaults ./db/changelog/liquibase-postgres.properties\n\n# MySQL com Docker\ncap apply --defaults ./db/changelog/liquibase-mysql.properties --docker\n\n# Oracle\ncap apply --defaults ./db/changelog/liquibase-oracle.properties\n</code></pre>"},{"location":"#conversao-de-inserts-sql","title":"Convers\u00e3o de INSERTs SQL","text":"<pre><code># Converter arquivo SQL com INSERTs para formato Liquibase\ncap convert-inserts --input ./data.sql --output ./changelog.yaml\n\n# Especificar nome da tabela\ncap convert-inserts --input ./data.sql --table usuarios --output ./changelog.yaml\n</code></pre>"},{"location":"#testes","title":"\ud83e\uddea Testes","text":"<p>O projeto inclui testes de integra\u00e7\u00e3o automatizados usando Jest e Prisma.</p> <pre><code># Executar testes de integra\u00e7\u00e3o\ncd tests/integration\nnpm install\nnpm test\n\n# Testes com diferentes SGBDs\nnpm test -- --testMatch=\"**/migration.test.ts\"\n</code></pre>"},{"location":"#documentacao","title":"\ud83d\udcda Documenta\u00e7\u00e3o","text":"<p>Para documenta\u00e7\u00e3o completa, visite: Documenta\u00e7\u00e3o</p>"},{"location":"#comandos-principais","title":"\ud83d\udd27 Comandos Principais","text":"Comando Descri\u00e7\u00e3o <code>cap doctor</code> Verificar pr\u00e9-requisitos e conectividade <code>cap migrations add &lt;nome&gt;</code> Criar nova migration com autor autom\u00e1tico <code>cap migrations import-ef</code> Importar migrations do EF Core <code>cap migrations mergeschemas</code> Consolidar m\u00faltiplas migrations <code>cap plan</code> Gerar plano SQL de execu\u00e7\u00e3o <code>cap apply</code> Aplicar migrations no banco <code>cap status</code> Ver status e migrations pendentes <code>cap validate</code> Validar sintaxe do changelog <code>cap drift detect</code> Detectar mudan\u00e7as n\u00e3o documentadas <code>cap tag &lt;nome&gt;</code> Criar tag para versionamento <code>cap remove-tag &lt;tag&gt;</code> Remover tag existente <code>cap rollback count &lt;N&gt;</code> Reverter N migrations <code>cap rollback to-tag &lt;tag&gt;</code> Reverter at\u00e9 uma tag espec\u00edfica <code>cap squash --tag &lt;tag&gt;</code> Consolidar hist\u00f3rico at\u00e9 tag <code>cap bye</code> Despedida com ASCII art \ud83e\uddab"},{"location":"#contato","title":"\ud83d\udcac Contato","text":"<ul> <li>\ud83d\udce7 Email: lora@gmail.com</li> <li>\ud83d\udcbc LinkedIn: Evellyn Fernandes</li> <li>\ud83d\udc31 GitHub: lor4z</li> <li>\ud83d\udcda Documentation: CapyDb Docs</li> </ul>"},{"location":"#licenca","title":"\ud83d\udcc4 Licen\u00e7a","text":"<p>Este projeto est\u00e1 sob licen\u00e7a Apache 2.0.</p>"},{"location":"#links-uteis","title":"\ud83d\udd17 Links \u00dateis","text":"<ul> <li>NuGet Package: https://www.nuget.org/packages/capydb.cli/</li> <li>GitHub Repository: https://github.com/lor4z/capybara-db</li> <li>Vers\u00e3o Atual: 1.0.7</li> </ul>"},{"location":"#novidades-na-v107","title":"\ud83c\udd95 Novidades na v1.0.7","text":"<ul> <li>\u2705 Busca de arquivos aprimorada no Windows - Corrigidos problemas com padr\u00f5es glob</li> <li>\u2705 Busca recursiva robusta - Encontra liquibase.properties em qualquer lugar</li> <li>\u2705 Suporte a monorepos - Funciona com estruturas de projeto complexas</li> <li>\u2705 Detec\u00e7\u00e3o de assemblies melhorada - Melhor integra\u00e7\u00e3o com EF Core</li> <li>\u2705 Compatibilidade multiplataforma - Testado no Windows, Linux, macOS</li> </ul> <p>Desenvolvido com \u2764\ufe0f para facilitar o gerenciamento de migrations de banco de dados.</p>"},{"location":"CAPY-CLI-GUIDE/","title":"CapyDb CLI - Guia Completo","text":"<p>Ferramenta de linha de comando para gerenciamento de migrations com Liquibase e Entity Framework Core</p>"},{"location":"CAPY-CLI-GUIDE/#indice","title":"\ud83d\udccb \u00cdndice","text":"<ul> <li>Instala\u00e7\u00e3o</li> <li>Comandos Principais</li> <li>Migrations</li> <li>Opera\u00e7\u00f5es de Banco</li> <li>Utilit\u00e1rios</li> <li>Sistema de Autores</li> <li>Configura\u00e7\u00e3o Avan\u00e7ada</li> <li>Troubleshooting</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#instalacao","title":"\ud83d\ude80 Instala\u00e7\u00e3o","text":""},{"location":"CAPY-CLI-GUIDE/#como-ferramenta-global","title":"Como Ferramenta Global","text":"<pre><code># Compilar e empacotar\ndotnet pack src/CapyDb.Cli/CapyDb.Cli.csproj -o nupkg\n\n# Instalar globalmente\ndotnet tool install -g capydb.cli --add-source ./nupkg\n\n# Verificar instala\u00e7\u00e3o\ncap --version\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#execucao-direta","title":"Execu\u00e7\u00e3o Direta","text":"<pre><code># Executar sem instalar\ndotnet run --project src/CapyDb.Cli -- [comandos]\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#comandos-principais","title":"\ud83d\udcd6 Comandos Principais","text":""},{"location":"CAPY-CLI-GUIDE/#informacoes-gerais","title":"Informa\u00e7\u00f5es Gerais","text":"<pre><code># Vers\u00e3o do CapyDb\ncap --version\n\n# Ajuda completa\ncap --help\n\n# Verificar pr\u00e9-requisitos\ncap doctor\n\n# Despedida (ASCII art)\ncap bye\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#migrations","title":"\ud83d\udcdd Migrations","text":""},{"location":"CAPY-CLI-GUIDE/#1-criar-nova-migration","title":"1. Criar Nova Migration","text":"<pre><code># Sintaxe b\u00e1sica\ncap migrations add &lt;nome&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es dispon\u00edveis:\n#   --no-stubs     : N\u00e3o criar diret\u00f3rios espec\u00edficos de SGBD\n#   --author &lt;nome&gt;: Especificar autor manualmente\n</code></pre> <p>Exemplos:</p> <pre><code># Migration simples\ncap migrations add criar-usuarios\n\n# Com autor customizado\ncap migrations add criar-usuarios --author \"Jo\u00e3o Silva\"\n\n# Sem criar stubs para SGBDs espec\u00edficos\ncap migrations add criar-usuarios --no-stubs\n\n# Combinando op\u00e7\u00f5es\ncap migrations add criar-usuarios --author \"Maria Santos\" --no-stubs\n</code></pre> <p>O que acontece: 1. \u2705 Cria arquivo YAML em <code>db/changelog/common/</code> 2. \u2705 Atualiza <code>db.changelog-master.yaml</code> 3. \u2705 Detecta autor automaticamente (ou usa <code>--author</code>) 4. \u2705 Gera timestamp \u00fanico para evitar conflitos</p> <p>Estrutura gerada: <pre><code># db/changelog/common/20250923_014331__criar-usuarios.yaml\ndatabaseChangeLog:\n  - changeSet:\n      id: 20250923_014331-criar-usuarios\n      author: Jo\u00e3o Silva  # Detectado automaticamente\n      context: common\n      changes:\n        # Suas altera\u00e7\u00f5es aqui\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#2-importar-migration-do-entity-framework","title":"2. Importar Migration do Entity Framework","text":"<pre><code># Sintaxe b\u00e1sica\ncap migrations import-ef [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es obrigat\u00f3rias:\n#   --assembly &lt;path&gt; : Caminho para DLL do EF Core\n#   --name &lt;class&gt;    : Nome da classe Migration\n#   --provider &lt;type&gt; : Tipo do provider (sqlserver|postgres|mysql)\n\n# Op\u00e7\u00f5es extras:\n#   --author &lt;nome&gt;   : Autor customizado\n</code></pre> <p>Exemplos:</p> <pre><code># Import b\u00e1sico do SQL Server\ncap migrations import-ef \\\n  --assembly ./MyApp/bin/Debug/net8.0/MyApp.dll \\\n  --name CreateUsersTable \\\n  --provider sqlserver\n\n# Com autor customizado\ncap migrations import-ef \\\n  --assembly ./MyApp.dll \\\n  --name CreateUsersTable \\\n  --provider postgres \\\n  --author \"Jo\u00e3o Silva\"\n\n# MySQL\ncap migrations import-ef \\\n  --assembly ./MyApp.dll \\\n  --name AddProductsTable \\\n  --provider mysql\n</code></pre> <p>O que acontece: 1. \u2705 Carrega assembly .NET especificado 2. \u2705 Encontra a classe Migration pelo nome 3. \u2705 Executa o m\u00e9todo <code>Up()</code> em mem\u00f3ria 4. \u2705 Converte opera\u00e7\u00f5es EF para YAML Liquibase 5. \u2705 Salva em <code>db/changelog/common/</code></p> <p>Opera\u00e7\u00f5es EF Suportadas: - \u2705 <code>CreateTable</code> \u2192 <code>createTable</code> - \u2705 <code>AddColumn</code> \u2192 <code>addColumn</code> - \u2705 <code>InsertData</code> \u2192 <code>insert</code> - \u2705 <code>DeleteData</code> \u2192 <code>delete</code> - \u26a0\ufe0f Outras opera\u00e7\u00f5es \u2192 SQL gen\u00e9rico com coment\u00e1rio</p>"},{"location":"CAPY-CLI-GUIDE/#3-merge-de-schemas","title":"3. Merge de Schemas","text":"<pre><code># Sintaxe b\u00e1sica\ncap migrations mergeschemas [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --scope &lt;tipo&gt;        : Escopo do merge (common|mssql|postgres|mysql)\n#   --include-merged      : Incluir arquivos j\u00e1 merged anteriormente\n#   --delete-old          : Mover arquivos antigos automaticamente\n</code></pre> <p>Exemplos:</p> <pre><code># Merge do escopo comum\ncap migrations mergeschemas --scope common\n\n# Incluindo merges antigos\ncap migrations mergeschemas --scope common --include-merged\n\n# Com dele\u00e7\u00e3o autom\u00e1tica dos arquivos antigos\ncap migrations mergeschemas --scope postgres --delete-old\n\n# Processo interativo (padr\u00e3o)\ncap migrations mergeschemas --scope mysql\n# Pergunta: \"Mover arquivos usados para 'db/changelog/deleteSchemas/mysql'? [s/N]\"\n</code></pre> <p>O que acontece: 1. \u2705 Coleta todos os arquivos .yaml/.yml do escopo 2. \u2705 Ordena por timestamp 3. \u2705 Consolida em um \u00fanico arquivo <code>__merged-&lt;scope&gt;.yaml</code> 4. \u2705 Atualiza <code>db.changelog-master.yaml</code> 5. \u2705 Opcionalmente move arquivos antigos para <code>deleteSchemas/</code></p>"},{"location":"CAPY-CLI-GUIDE/#operacoes-de-banco","title":"\ud83d\uddc3\ufe0f Opera\u00e7\u00f5es de Banco","text":""},{"location":"CAPY-CLI-GUIDE/#1-gerar-plano-de-execucao","title":"1. Gerar Plano de Execu\u00e7\u00e3o","text":"<pre><code># Sintaxe b\u00e1sica\ncap plan --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker em vez de Liquibase CLI local\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n#   --output &lt;arquivo&gt;: Arquivo de sa\u00edda para o plano SQL\n</code></pre> <p>Exemplos:</p> <pre><code># Gerar plano b\u00e1sico\ncap plan --defaults ./db/changelog/liquibase.properties\n\n# Salvar plano em arquivo\ncap plan --defaults ./db/changelog/liquibase.properties --output plan.sql\n\n# Usar Docker\ncap plan --defaults ./db/changelog/liquibase.properties --docker\n\n# Com diret\u00f3rio de trabalho espec\u00edfico\ncap plan --defaults ./config/liquibase.properties --workdir ./database\n</code></pre> <p>Use Cases: - \ud83d\udccb Code Review: Anexar <code>plan.sql</code> em Pull Requests - \ud83d\udd0d Auditoria: Revisar mudan\u00e7as antes de aplicar - \ud83d\udcca Documenta\u00e7\u00e3o: Hist\u00f3rico de altera\u00e7\u00f5es aplicadas</p>"},{"location":"CAPY-CLI-GUIDE/#deteccao-automatica-de-arquivos-novo-na-v107","title":"\ud83d\udca1 Detec\u00e7\u00e3o Autom\u00e1tica de Arquivos (Novo na v1.0.7!)","text":"<p>A partir da v1.0.7, o CapyDb possui busca recursiva inteligente para <code>liquibase.properties</code>:</p> <p>Prioridade de busca: 1. <code>./db/changelog/liquibase.properties</code> (recomendado) 2. <code>./liquibase.properties</code> (raiz do projeto) 3. <code>./config/liquibase.properties</code> 4. <code>./database/liquibase.properties</code> 5. <code>./migrations/liquibase.properties</code> 6. <code>./src/*/db/changelog/liquibase.properties</code> (estruturas de monorepo) 7. <code>./apps/*/db/changelog/liquibase.properties</code> (estruturas de monorepo) 8. <code>./*/db/changelog/liquibase.properties</code> (qualquer subdiret\u00f3rio) 9. Busca recursiva geral em todos os subdiret\u00f3rios (excluindo node_modules e .git)</p> <p>Vantagens: - \u2705 Funciona automaticamente em monorepos complexos - \u2705 Detecta arquivos em estruturas aninhadas - \u2705 Compatibilidade total com Windows (corrigidos problemas de glob patterns) - \u2705 N\u00e3o precisa mais especificar <code>--defaults</code> em 99% dos casos</p> <pre><code># Agora voc\u00ea pode fazer apenas:\ncap apply          # Busca automaticamente!\ncap plan           # Em qualquer lugar do projeto!\ncap status         # Mesmo em estruturas complexas!\n\n# O --defaults ainda funciona se necess\u00e1rio:\ncap apply --defaults ./custom/path/liquibase.properties\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#2-aplicar-migrations","title":"2. Aplicar Migrations","text":"<pre><code># Sintaxe b\u00e1sica\ncap apply --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n#   --output &lt;arquivo&gt;: Log da execu\u00e7\u00e3o\n</code></pre> <p>Exemplos:</p> <pre><code># Aplicar todas as migrations pendentes\ncap apply --defaults ./db/changelog/liquibase.properties\n\n# Com log detalhado\ncap apply --defaults ./db/changelog/liquibase.properties --output apply.log\n\n# Usando Docker\ncap apply --defaults ./db/changelog/liquibase.properties --docker\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#3-verificar-status","title":"3. Verificar Status","text":"<pre><code># Ver status das migrations\ncap status --defaults ./db/changelog/liquibase.properties\n\n# Com Docker\ncap status --defaults ./db/changelog/liquibase.properties --docker\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#4-validar-changelog","title":"4. Validar Changelog","text":"<pre><code># Validar sintaxe e estrutura\ncap validate --defaults ./db/changelog/liquibase.properties\n\n# Com output detalhado\ncap validate --defaults ./db/changelog/liquibase.properties --output validation.log\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#5-criar-tags","title":"5. Criar Tags","text":"<pre><code># Sintaxe b\u00e1sica\ncap tag &lt;nome&gt; --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Exemplos\ncap tag v1.0.0 --defaults ./db/changelog/liquibase.properties\ncap tag release-2025-01 --defaults ./db/changelog/liquibase.properties --docker\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#6-remover-tags","title":"6. Remover Tags","text":"<pre><code># Sintaxe b\u00e1sica\ncap remove-tag &lt;tag&gt; --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n</code></pre> <p>Exemplos:</p> <pre><code># Remover tag existente\ncap remove-tag v1.0.0 --defaults ./db/changelog/liquibase.properties\n\n# Com Docker\ncap remove-tag release-2025-01 --defaults ./db/changelog/liquibase.properties --docker\n\n# Com diret\u00f3rio de trabalho espec\u00edfico\ncap remove-tag old-tag --defaults ./config/liquibase.properties --workdir ./database\n</code></pre> <p>O que acontece: 1. \u2705 Cria changeset tempor\u00e1rio com comando SQL UPDATE 2. \u2705 Remove a tag da coluna TAG na tabela DATABASECHANGELOG 3. \u2705 Limpa arquivo tempor\u00e1rio ap\u00f3s execu\u00e7\u00e3o 4. \u2705 Valida se a tag existe antes de remover</p> <p>Use Cases: - \ud83c\udff7\ufe0f Corre\u00e7\u00e3o de Tags: Remover tags criadas por engano - \ud83d\udd04 Re-tagging: Limpar tags antigas antes de criar novas - \ud83e\uddf9 Limpeza: Manter apenas tags relevantes no hist\u00f3rico</p>"},{"location":"CAPY-CLI-GUIDE/#7-rollback","title":"7. Rollback","text":"<pre><code># Rollback por contagem\ncap rollback count &lt;N&gt; --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Rollback at\u00e9 tag espec\u00edfica\ncap rollback to-tag &lt;tag&gt; --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n</code></pre> <p>Exemplos:</p> <pre><code># Reverter \u00faltimas 3 migrations\ncap rollback count 3 --defaults ./db/changelog/liquibase.properties\n\n# Voltar para tag espec\u00edfica\ncap rollback to-tag v1.0.0 --defaults ./db/changelog/liquibase.properties\n\n# Com Docker\ncap rollback count 1 --defaults ./db/changelog/liquibase.properties --docker\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#utilitarios","title":"\ud83d\udee0\ufe0f Utilit\u00e1rios","text":""},{"location":"CAPY-CLI-GUIDE/#1-doctor-verificacao-de-pre-requisitos","title":"1. Doctor - Verifica\u00e7\u00e3o de Pr\u00e9-requisitos","text":"<pre><code># Verifica\u00e7\u00e3o completa\ncap doctor\n\n# Com arquivo de configura\u00e7\u00e3o espec\u00edfico\ncap doctor --defaults ./db/changelog/liquibase.properties\n</code></pre> <p>O que \u00e9 verificado: - \u2705 Java: Instala\u00e7\u00e3o e vers\u00e3o - \u26a0\ufe0f Docker: Disponibilidade (opcional) - \u26a0\ufe0f Drivers: Diret\u00f3rio <code>db/drivers/</code> e arquivos .jar - \u2705 Arquivo defaults: Exist\u00eancia e conte\u00fado - \u2705 Conex\u00e3o DB: Teste de conectividade</p> <p>Exemplo de sa\u00edda: <pre><code>\ud83e\ude7a CapyDb Doctor - Verificando pr\u00e9-requisitos...\n\n\u2705 Java: java version \"17.0.7\" 2023-04-18 LTS\n\u26a0\ufe0f  Docker: N\u00e3o dispon\u00edvel (opcional)\n\u26a0\ufe0f  Drivers: Diret\u00f3rio db/drivers n\u00e3o existe\n   Crie o diret\u00f3rio e adicione os JARs dos drivers JDBC\n\u2705 Defaults: Arquivo db/changelog/liquibase.properties existe\n\u2705 Banco: Conex\u00e3o OK\n\n\u2705 Todos os pr\u00e9-requisitos est\u00e3o OK!\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#2-drift-detection-deteccao-de-divergencias","title":"2. Drift Detection - Detec\u00e7\u00e3o de Diverg\u00eancias","text":"<pre><code># Sintaxe b\u00e1sica\ncap drift detect --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n#   --output &lt;arquivo&gt;: Arquivo de relat\u00f3rio (padr\u00e3o: drift-report.xml)\n</code></pre> <p>Exemplos:</p> <pre><code># Detectar diverg\u00eancias b\u00e1sicas\ncap drift detect --defaults ./db/changelog/liquibase.properties\n\n# Com arquivo de sa\u00edda customizado\ncap drift detect --defaults ./db/changelog/liquibase.properties --output drift-analysis.xml\n\n# Usando Docker\ncap drift detect --defaults ./db/changelog/liquibase.properties --docker\n</code></pre> <p>Use Cases: - \ud83d\udd0d Schema Validation: Verificar se DB est\u00e1 sincronizado - \ud83d\udcca Auditoria: Detectar mudan\u00e7as manuais n\u00e3o documentadas - \ud83d\udea8 CI/CD: Validar ambiente antes de deploy</p>"},{"location":"CAPY-CLI-GUIDE/#3-squash-consolidacao-de-historico","title":"3. Squash - Consolida\u00e7\u00e3o de Hist\u00f3rico","text":"<pre><code># Sintaxe b\u00e1sica\ncap squash --tag &lt;tag&gt; --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n</code></pre> <p>Exemplos:</p> <pre><code># Consolidar at\u00e9 tag espec\u00edfica\ncap squash --tag v1.0.0 --defaults ./db/changelog/liquibase.properties\n\n# Com Docker\ncap squash --tag release-2025 --defaults ./db/changelog/liquibase.properties --docker\n</code></pre> <p>O que acontece: 1. \ud83d\udddc\ufe0f Aplica todo hist\u00f3rico at\u00e9 a tag especificada 2. \ud83d\udcdd Gera baseline consolidado do schema atual 3. \ud83d\udce6 Move arquivos antigos para <code>db/changelog/archive/</code> 4. \ud83d\udd04 Recria changelog master apontando para baseline</p> <p>Estrutura ap\u00f3s squash: <pre><code>db/changelog/\n\u251c\u2500\u2500 archive/\n\u2502   \u2514\u2500\u2500 squash-20250923-014500/\n\u2502       \u251c\u2500\u2500 common/           # Migrations antigas\n\u2502       \u251c\u2500\u2500 mssql/\n\u2502       \u2514\u2500\u2500 postgres/\n\u251c\u2500\u2500 common/\n\u2502   \u2514\u2500\u2500 baseline-20250923-014500.yaml  # Schema consolidado\n\u2514\u2500\u2500 db.changelog-master.yaml           # Aponta para baseline\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#4-conversor-de-inserts-sql","title":"4. Conversor de INSERTs SQL","text":"<pre><code># Sintaxe b\u00e1sica\ncap convert-inserts --input &lt;arquivo.sql&gt; --output &lt;arquivo.yaml&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --input &lt;path&gt;    : Arquivo SQL com INSERTs (obrigat\u00f3rio)\n#   --output &lt;path&gt;   : Arquivo YAML de sa\u00edda (obrigat\u00f3rio)\n#   --table &lt;nome&gt;    : Nome da tabela (opcional, detectado automaticamente)\n#   --author &lt;nome&gt;   : Autor do changeset (opcional)\n</code></pre> <p>Exemplos:</p> <pre><code># Convers\u00e3o b\u00e1sica\ncap convert-inserts --input ./data.sql --output ./changelog.yaml\n\n# Especificar tabela e autor\ncap convert-inserts \\\n  --input ./usuarios.sql \\\n  --output ./db/changelog/common/seed-usuarios.yaml \\\n  --table usuarios \\\n  --author \"Jo\u00e3o Silva\"\n\n# Converter m\u00faltiplas INSERTs\ncap convert-inserts --input ./seed-data.sql --output ./changelog-seed.yaml\n</code></pre> <p>Formato de entrada (SQL): <pre><code>INSERT INTO usuarios (id, nome, email, ativo) VALUES (1, 'Jo\u00e3o Silva', 'joao@email.com', 1);\nINSERT INTO usuarios (id, nome, email, ativo) VALUES (2, 'Maria Santos', 'maria@email.com', 1);\nINSERT INTO usuarios (id, nome, email, ativo) VALUES (3, 'Pedro Oliveira', 'pedro@email.com', 0);\n</code></pre></p> <p>Formato de sa\u00edda (YAML): <pre><code>databaseChangeLog:\n  - changeSet:\n      id: convert-inserts-20250930-101530\n      author: Jo\u00e3o Silva\n      context: common\n      changes:\n        - insert:\n            tableName: usuarios\n            columns:\n              - column: { name: id, value: 1 }\n              - column: { name: nome, value: 'Jo\u00e3o Silva' }\n              - column: { name: email, value: 'joao@email.com' }\n              - column: { name: ativo, value: 1 }\n        - insert:\n            tableName: usuarios\n            columns:\n              - column: { name: id, value: 2 }\n              - column: { name: nome, value: 'Maria Santos' }\n              - column: { name: email, value: 'maria@email.com' }\n              - column: { name: ativo, value: 1 }\n</code></pre></p> <p>Use Cases: - \ud83d\udcca Seed Data: Converter dados iniciais para Liquibase - \ud83d\udd04 Migra\u00e7\u00e3o: Importar dados de SQL legado - \ud83e\uddea Testes: Criar dados de teste em formato port\u00e1vel - \ud83d\udce6 Fixtures: Preparar dados para diferentes ambientes</p> <p>Recursos: - \u2705 Detecta automaticamente nome da tabela - \u2705 Preserva tipos de dados (strings, n\u00fameros, booleanos, NULL) - \u2705 Suporta m\u00faltiplos INSERTs no mesmo arquivo - \u2705 Escapa caracteres especiais corretamente - \u2705 Gera changeSet com ID \u00fanico baseado em timestamp</p>"},{"location":"CAPY-CLI-GUIDE/#data-seeding-carga-de-dados","title":"\ud83d\udcca Data Seeding (Carga de Dados)","text":""},{"location":"CAPY-CLI-GUIDE/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O CapyDb oferece um sistema completo para gerenciar dados iniciais (seed data) separadamente das migrations de schema. Isso permite:</p> <ul> <li>\u2705 Versionamento independente de dados e schema</li> <li>\u2705 Gera\u00e7\u00e3o autom\u00e1tica de changesets a partir de CSV</li> <li>\u2705 Infer\u00eancia inteligente de tipos de dados</li> <li>\u2705 Rollback espec\u00edfico de dados sem afetar o schema</li> <li>\u2705 Filtragem por label (<code>data-seed</code>)</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#1-gerar-changelog-a-partir-de-csv","title":"1. Gerar Changelog a partir de CSV","text":"<pre><code># Sintaxe b\u00e1sica\ncap carga from-csv --input &lt;arquivo.csv&gt; --table &lt;tabela&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es obrigat\u00f3rias:\n#   --input, -i &lt;path&gt;    : Caminho para arquivo CSV\n#   --table, -t &lt;nome&gt;    : Nome da tabela de destino\n\n# Op\u00e7\u00f5es adicionais:\n#   --output, -o &lt;path&gt;   : Arquivo YAML de sa\u00edda (padr\u00e3o: db/changelog/carga-updates/YYYYMMDD__carga-&lt;tabela&gt;.yaml)\n#   --author &lt;nome&gt;       : Nome do autor (padr\u00e3o: CapyDb)\n#   --context &lt;contexto&gt;  : Contexto do changeset (padr\u00e3o: common)\n#   --add-to-master       : Adicionar automaticamente ao db.changelog-master.yaml\n</code></pre> <p>Exemplos:</p> <pre><code># Gera\u00e7\u00e3o b\u00e1sica\ncap carga from-csv --input db/carga/Users.csv --table Users\n\n# Com todas as op\u00e7\u00f5es\ncap carga from-csv \\\n  --input db/carga/Countries.csv \\\n  --table TabelaAuxiliarCountries \\\n  --author \"Evellyn Fernandes\" \\\n  --output db/changelog/carga-updates/countries.yaml \\\n  --add-to-master\n\n# Forma abreviada\ncap carga from-csv -i db/carga/Cities.csv -t Cities\n\n# M\u00faltiplos arquivos em lote\nfor file in db/carga/*.csv; do\n  table=$(basename \"$file\" .csv)\n  cap carga from-csv -i \"$file\" -t \"$table\" --add-to-master\ndone\n</code></pre> <p>Infer\u00eancia Autom\u00e1tica de Tipos:</p> <p>O comando analisa os nomes das colunas do CSV e infere os tipos automaticamente:</p> Padr\u00e3o de Nome Tipo Inferido Exemplos <code>*Id</code>, <code>PublicId</code> UUID <code>Id</code>, <code>UserId</code>, <code>PublicId</code> <code>Excluido</code>, <code>Ativo</code>, <code>Is*</code>, <code>Has*</code> BOOLEAN <code>Excluido</code>, <code>Ativo</code>, <code>IsActive</code>, <code>HasPermission</code> <code>Data*</code>, <code>Date*</code>, <code>*Timestamp</code>, <code>*At</code> TIMESTAMP <code>DataCriacao</code>, <code>DateCreated</code>, <code>CreatedAt</code>, <code>UpdatedAt</code> <code>*Num</code>, <code>*Numero</code>, <code>Count</code>, <code>Quantidade</code> NUMERIC <code>CodigoNum</code>, <code>Age</code>, <code>Count</code>, <code>Quantidade</code> Outros STRING <code>Name</code>, <code>Email</code>, <code>Description</code> <p>Resolu\u00e7\u00e3o Autom\u00e1tica de Depend\u00eancias:</p> <p>O CapyDb detecta automaticamente as depend\u00eancias entre tabelas e ordena os changesets corretamente:</p> <ul> <li>\u2705 Detec\u00e7\u00e3o de Foreign Keys: Colunas terminadas em <code>Id</code> (exceto <code>Id</code> e <code>PublicId</code>) s\u00e3o consideradas FKs</li> <li>\u2705 Resolu\u00e7\u00e3o de Nomes: Remove prefixos como <code>TabelaAuxiliar</code> para encontrar tabelas referenciadas</li> <li>\u2705 Ordena\u00e7\u00e3o Topol\u00f3gica: Tabelas sem depend\u00eancias s\u00e3o carregadas primeiro</li> <li>\u2705 Detec\u00e7\u00e3o de Ciclos: Alerta sobre depend\u00eancias circulares entre tabelas</li> <li>\u2705 Matching Inteligente: Busca tabelas por nome exato, com prefixo, plural, ou parcial</li> </ul> <p>Exemplo de Depend\u00eancias: <pre><code>ModuloCategoria.csv tem coluna \"ModuloId\"\n  \u2193 CapyDb detecta FK para \"Modulo\"\n  \u2193 Ordena automaticamente:\n    1. Modulo.csv           (sem depend\u00eancias)\n    2. ModuloCategoria.csv  (depende de Modulo)\n</code></pre></p> <p>Exemplo de CSV: <pre><code>Id,Name,Email,IsActive,CreatedAt,Age\ncc53be96-29d4-46ec-882d-042ad26f3aa5,Jo\u00e3o Silva,joao@email.com,true,2024-01-01,30\n6771123b-a632-423d-9c8a-f1ec7fd4b438,Maria Santos,maria@email.com,true,2024-01-02,25\n</code></pre></p> <p>YAML Gerado: <pre><code>databaseChangeLog:\n  - changeSet:\n      id: 20251017-carga-users\n      author: CapyDb\n      context: common\n      labels: data-seed\n      changes:\n        - loadData:\n            tableName: Users\n            file: db/carga/Users.csv\n            relativeToChangelogFile: false\n            separator: \",\"\n            quotchar: '\"'\n            encoding: UTF-8\n            columns:\n              - column:\n                  name: Id\n                  type: UUID\n              - column:\n                  name: Name\n                  type: STRING\n              - column:\n                  name: Email\n                  type: STRING\n              - column:\n                  name: IsActive\n                  type: BOOLEAN\n              - column:\n                  name: CreatedAt\n                  type: TIMESTAMP\n              - column:\n                  name: Age\n                  type: NUMERIC\n      rollback:\n        - delete:\n            tableName: Users\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#2-aplicar-dados-de-seed","title":"2. Aplicar Dados de Seed","text":"<pre><code># Sintaxe b\u00e1sica\ncap carga update --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n#   --output &lt;arquivo&gt;: Log da execu\u00e7\u00e3o\n#   --logs            : Exibir logs detalhados\n</code></pre> <p>Exemplos:</p> <pre><code># Aplicar todos os changesets com label 'data-seed'\ncap carga update --defaults ./db/changelog/liquibase.properties\n\n# Com logs detalhados\ncap carga update --defaults ./db/changelog/liquibase.properties --logs\n\n# Usando Docker\ncap carga update --defaults ./db/changelog/liquibase.properties --docker\n</code></pre> <p>O que acontece: 1. \u2705 Liquibase filtra changesets com label <code>data-seed</code> 2. \u2705 Aplica apenas os changesets de dados ainda n\u00e3o executados 3. \u2705 Registra execu\u00e7\u00e3o na tabela <code>DATABASECHANGELOG</code> 4. \u2705 Pula changesets de schema (sem label ou com outras labels)</p>"},{"location":"CAPY-CLI-GUIDE/#3-remover-e-reaplicar-dados-desenvolvimento","title":"3. Remover e Reaplicar Dados (Desenvolvimento)","text":"<pre><code># Sintaxe b\u00e1sica\ncap carga drop-all --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n#   --logs            : Exibir logs detalhados\n</code></pre> <p>Exemplos:</p> <pre><code># Remover todos os dados e reaplicar\ncap carga drop-all --defaults ./db/changelog/liquibase.properties\n\n# Com Docker\ncap carga drop-all --defaults ./db/changelog/liquibase.properties --docker\n</code></pre> <p>\u26a0\ufe0f ATEN\u00c7\u00c3O: - Remove TODOS os dados das tabelas referenciadas nos changesets de data-seed - \u00datil para desenvolvimento e testes - N\u00c3O usar em produ\u00e7\u00e3o sem backup!</p>"},{"location":"CAPY-CLI-GUIDE/#4-reset-completo-schema-dados","title":"4. Reset Completo (Schema + Dados)","text":"<pre><code># Sintaxe b\u00e1sica\ncap carga reset --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n#   --logs            : Exibir logs detalhados\n</code></pre> <p>Exemplos:</p> <pre><code># CUIDADO: Apaga TODO o banco e recria\ncap carga reset --defaults ./db/changelog/liquibase.properties\n\n# Com confirma\u00e7\u00e3o\nread -p \"Tem certeza que deseja resetar o banco? [s/N] \" -n 1 -r\necho\nif [[ $REPLY =~ ^[Ss]$ ]]; then\n    cap carga reset --defaults ./db/changelog/liquibase.properties\nfi\n</code></pre> <p>\u26a0\ufe0f PERIGO: - Executa <code>DROP ALL</code> no banco inteiro - Recria schema e dados do zero - EXTREMAMENTE DESTRUTIVO - Requer confirma\u00e7\u00e3o manual</p>"},{"location":"CAPY-CLI-GUIDE/#5-rollback-de-dados","title":"5. Rollback de Dados","text":"<pre><code># Sintaxe b\u00e1sica\ncap carga rollback --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n#   --logs            : Exibir logs detalhados\n</code></pre> <p>Exemplos:</p> <pre><code># Reverter \u00faltimo changeset de dados\ncap carga rollback --defaults ./db/changelog/liquibase.properties\n\n# Com logs\ncap carga rollback --defaults ./db/changelog/liquibase.properties --logs\n</code></pre> <p>O que acontece: 1. \u2705 Identifica \u00faltimo changeset com label <code>data-seed</code> 2. \u2705 Executa bloco <code>rollback</code> do changeset 3. \u2705 Remove registro da tabela <code>DATABASECHANGELOG</code> 4. \u2705 Permite reaplicar o changeset posteriormente</p>"},{"location":"CAPY-CLI-GUIDE/#6-status-de-dados","title":"6. Status de Dados","text":"<pre><code># Sintaxe b\u00e1sica\ncap carga status --defaults &lt;arquivo.properties&gt; [op\u00e7\u00f5es]\n\n# Op\u00e7\u00f5es:\n#   --docker          : Usar Docker\n#   --workdir &lt;dir&gt;   : Diret\u00f3rio de trabalho\n</code></pre> <p>Exemplos:</p> <pre><code># Ver status dos changesets de dados\ncap carga status --defaults ./db/changelog/liquibase.properties\n\n# Com Docker\ncap carga status --defaults ./db/changelog/liquibase.properties --docker\n</code></pre> <p>Sa\u00edda: <pre><code>3 changesets have not been applied to sa@jdbc:sqlserver://localhost:1433;...\n  db/changelog/carga-updates/20251017__carga-countries.yaml::20251017-carga-countries::Evellyn Fernandes\n  db/changelog/carga-updates/20251017__carga-cities.yaml::20251017-carga-cities::Evellyn Fernandes\n  db/changelog/carga-updates/20251017__carga-users.yaml::20251017-carga-users::Evellyn Fernandes\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#workflow-completo-de-data-seeding","title":"Workflow Completo de Data Seeding","text":"<pre><code># 1. Preparar CSV\ncat &gt; db/carga/Countries.csv &lt;&lt; EOF\nId,Name,Code,Population,IsActive\n1,Brasil,BR,212000000,true\n2,Estados Unidos,US,331000000,true\n3,Argentina,AR,45000000,true\nEOF\n\n# 2. Gerar changelog\ncap carga from-csv \\\n  --input db/carga/Countries.csv \\\n  --table Countries \\\n  --author \"Evellyn Fernandes\" \\\n  --add-to-master\n\n# 3. Verificar arquivo gerado\ncat db/changelog/carga-updates/20251017__carga-countries.yaml\n\n# 4. Aplicar dados\ncap carga update --defaults db/changelog/liquibase.properties\n\n# 5. Verificar status\ncap carga status --defaults db/changelog/liquibase.properties\n\n# 6. Se necess\u00e1rio, reverter\ncap carga rollback --defaults db/changelog/liquibase.properties\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#estrutura-de-projeto-com-data-seeding","title":"Estrutura de Projeto com Data Seeding","text":"<pre><code>projeto/\n\u251c\u2500\u2500 db/\n\u2502   \u251c\u2500\u2500 changelog/\n\u2502   \u2502   \u251c\u2500\u2500 common/              # Schema migrations\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 20250101_120000__create-tables.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 20250102_143000__add-columns.yaml\n\u2502   \u2502   \u251c\u2500\u2500 carga-updates/       # Data seed migrations\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 20251017__carga-countries.yaml\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 20251017__carga-cities.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 20251017__carga-users.yaml\n\u2502   \u2502   \u251c\u2500\u2500 db.changelog-master.yaml\n\u2502   \u2502   \u2514\u2500\u2500 liquibase.properties\n\u2502   \u251c\u2500\u2500 carga/                   # CSV source files\n\u2502   \u2502   \u251c\u2500\u2500 Countries.csv\n\u2502   \u2502   \u251c\u2500\u2500 Cities.csv\n\u2502   \u2502   \u2514\u2500\u2500 Users.csv\n\u2502   \u2514\u2500\u2500 drivers/\n\u2514\u2500\u2500 src/\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#resolucao-automatica-de-dependencias","title":"Resolu\u00e7\u00e3o Autom\u00e1tica de Depend\u00eancias","text":"<p>O CapyDb CLI v1.2.3+ inclui um sistema inteligente de resolu\u00e7\u00e3o de depend\u00eancias que:</p> <p>Como Funciona:</p> <ol> <li>Escaneia todos os changesets em <code>db/changelog/carga-updates/</code></li> <li>L\u00ea os cabe\u00e7alhos CSV de cada arquivo referenciado</li> <li>Detecta Foreign Keys - colunas terminadas em <code>Id</code> (exceto <code>Id</code> e <code>PublicId</code>)</li> <li>Resolve nomes de tabelas - remove prefixos como <code>TabelaAuxiliar</code></li> <li>Ordena topologicamente - coloca depend\u00eancias primeiro</li> <li>Atualiza db.changelog-carga.yaml com a ordem correta</li> </ol> <p>Algoritmo de Matching:</p> <pre><code>Coluna CSV: \"ModuloId\"\n  \u2193 Remove \"Id\" \u2192 \"Modulo\"\n  \u2193 Busca por:\n    1. Match exato: \"Modulo\"\n    2. Com prefixo: \"TabelaAuxiliarModulo\"\n    3. Plural: \"Modulos\" ou \"TabelaAuxiliarModulos\"\n    4. Parcial: termina com \"Modulo\"\n  \u2193 Encontrado: adiciona depend\u00eancia\n</code></pre> <p>Exemplo Pr\u00e1tico:</p> <pre><code># Voc\u00ea tem estes CSVs:\n# - Modulo.csv (sem FKs)\n# - ModuloCategoria.csv (tem ModuloId \u2192 FK para Modulo)\n# - FundamentacoesLegais.csv (tem LeisId \u2192 FK para TabelaAuxiliarLeis)\n\n# Ao executar:\ncap carga from-csv -i db/carga/ModuloCategoria.csv -t ModuloCategoria --add-to-master\ncap carga from-csv -i db/carga/Modulo.csv -t Modulo --add-to-master\ncap carga from-csv -i db/carga/FundamentacoesLegais.csv -t FundamentacoesLegais --add-to-master\n\n# O CapyDb reordena automaticamente em db.changelog-carga.yaml:\n#   1. Modulo (sem depend\u00eancias)\n#   2. TabelaAuxiliarLeis (sem depend\u00eancias)\n#   3. ModuloCategoria (depende de Modulo)\n#   4. FundamentacoesLegais (depende de Leis)\n\n# Resultado: zero erros de FK constraint!\n</code></pre> <p>Tratamento de Casos Especiais:</p> <ul> <li>Depend\u00eancias n\u00e3o encontradas: Aviso amarelo, mas continua execu\u00e7\u00e3o</li> <li>Depend\u00eancias circulares: Detectadas e reportadas com erro</li> <li>M\u00faltiplas FKs: Todas s\u00e3o detectadas e consideradas</li> <li>Prefixos customizados: Sistema tenta m\u00faltiplas varia\u00e7\u00f5es</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#use-cases","title":"Use Cases","text":"<p>1. Dados de Refer\u00eancia: <pre><code># Pa\u00edses, estados, cidades\ncap carga from-csv -i db/carga/Countries.csv -t Countries --add-to-master\ncap carga from-csv -i db/carga/States.csv -t States --add-to-master\ncap carga from-csv -i db/carga/Cities.csv -t Cities --add-to-master\ncap carga update --defaults db/changelog/liquibase.properties\n</code></pre></p> <p>2. Configura\u00e7\u00f5es do Sistema: <pre><code># Configura\u00e7\u00f5es, permiss\u00f5es, roles\ncap carga from-csv -i db/carga/SystemConfig.csv -t SystemConfig --add-to-master\ncap carga from-csv -i db/carga/Roles.csv -t Roles --add-to-master\ncap carga update --defaults db/changelog/liquibase.properties\n</code></pre></p> <p>3. Dados de Teste: <pre><code># Ambiente de desenvolvimento\ncap carga from-csv -i db/carga/TestUsers.csv -t Users --context dev\ncap carga update --defaults db/changelog/liquibase-dev.properties\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#sistema-de-autores","title":"\ud83d\udc64 Sistema de Autores","text":""},{"location":"CAPY-CLI-GUIDE/#deteccao-automatica-ordem-de-prioridade","title":"Detec\u00e7\u00e3o Autom\u00e1tica (ordem de prioridade)","text":"<ol> <li>Par\u00e2metro <code>--author</code> (prioridade m\u00e1xima)</li> <li>Vari\u00e1vel <code>CAPY_AUTHOR</code> (configura\u00e7\u00e3o espec\u00edfica)</li> <li>Git user.name (configura\u00e7\u00e3o local)</li> <li>Vari\u00e1veis do sistema (<code>GIT_AUTHOR_NAME</code>, <code>USER</code>, <code>USERNAME</code>, <code>LOGNAME</code>)</li> <li>Fallback (<code>capydb</code>)</li> </ol>"},{"location":"CAPY-CLI-GUIDE/#configuracao-por-ambiente","title":"Configura\u00e7\u00e3o por Ambiente","text":""},{"location":"CAPY-CLI-GUIDE/#desenvolvimento-local","title":"Desenvolvimento Local","text":"<pre><code># Configurar Git (detectado automaticamente)\ngit config user.name \"Jo\u00e3o Silva\"\n\n# Ou usar vari\u00e1vel espec\u00edfica\nexport CAPY_AUTHOR=\"Jo\u00e3o Silva\"  # Linux/Mac\nset CAPY_AUTHOR=Jo\u00e3o Silva       # Windows\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#cicd-pipelines","title":"CI/CD Pipelines","text":"<p>GitHub Actions: <pre><code>env:\n  CAPY_AUTHOR: \"${{ github.actor }}\"  # Nome do usu\u00e1rio que fez commit\n</code></pre></p> <p>Azure DevOps: <pre><code>variables:\n  CAPY_AUTHOR: \"$(Build.RequestedFor)\"  # Nome do usu\u00e1rio\n</code></pre></p> <p>Jenkins: <pre><code>environment {\n    CAPY_AUTHOR = \"${env.BUILD_USER}\"\n}\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":"<pre><code># Detec\u00e7\u00e3o autom\u00e1tica (usa Git)\ncap migrations add criar-produtos\n# author: Jo\u00e3o Silva (do Git)\n\n# Autor espec\u00edfico\ncap migrations add criar-produtos --author \"Maria Santos\"\n# author: Maria Santos\n\n# Via vari\u00e1vel de ambiente\nexport CAPY_AUTHOR=\"CI/CD Pipeline\"\ncap migrations add criar-produtos\n# author: CI/CD Pipeline\n\n# Import EF com autor\ncap migrations import-ef \\\n  --assembly MyApp.dll \\\n  --name CreateProducts \\\n  --provider sqlserver \\\n  --author \"Jo\u00e3o Silva\"\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#configuracao-avancada","title":"\u2699\ufe0f Configura\u00e7\u00e3o Avan\u00e7ada","text":""},{"location":"CAPY-CLI-GUIDE/#arquivo-liquibaseproperties","title":"Arquivo liquibase.properties","text":"<p>Exemplo completo: <pre><code># Configura\u00e7\u00e3o do banco\nurl=jdbc:sqlserver://localhost:1433;databaseName=MyApp;trustServerCertificate=true\nusername=sa\npassword=MyPassword123\n\n# Configura\u00e7\u00e3o do changelog\nchangeLogFile=db/changelog/db.changelog-master.yaml\n\n# Drivers (se usando CLI local)\nclasspath=db/drivers/mssql-jdbc-12.4.2.jre11.jar\n\n# Configura\u00e7\u00f5es extras\nlogLevel=INFO\ncontexts=common,production\nlabels=!test\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#estrutura-de-projeto-recomendada","title":"Estrutura de Projeto Recomendada","text":"<pre><code>projeto/\n\u251c\u2500\u2500 db/\n\u2502   \u251c\u2500\u2500 changelog/\n\u2502   \u2502   \u251c\u2500\u2500 common/              # Migrations de schema port\u00e1veis\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 20250101_120000__initial.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 20250102_143000__add-users.yaml\n\u2502   \u2502   \u251c\u2500\u2500 carga-updates/       # Migrations de data seeding\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 20251017__carga-countries.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 20251017__carga-cities.yaml\n\u2502   \u2502   \u251c\u2500\u2500 mssql/               # Espec\u00edfico SQL Server\n\u2502   \u2502   \u251c\u2500\u2500 postgres/            # Espec\u00edfico PostgreSQL\n\u2502   \u2502   \u251c\u2500\u2500 mysql/               # Espec\u00edfico MySQL\n\u2502   \u2502   \u251c\u2500\u2500 archive/             # Arquivos ap\u00f3s squash\n\u2502   \u2502   \u251c\u2500\u2500 deleteSchemas/       # Arquivos ap\u00f3s merge\n\u2502   \u2502   \u251c\u2500\u2500 db.changelog-master.yaml\n\u2502   \u2502   \u2514\u2500\u2500 liquibase.properties\n\u2502   \u251c\u2500\u2500 carga/                   # Arquivos CSV para data seeding\n\u2502   \u2502   \u251c\u2500\u2500 Countries.csv\n\u2502   \u2502   \u251c\u2500\u2500 Cities.csv\n\u2502   \u2502   \u2514\u2500\u2500 Users.csv\n\u2502   \u2514\u2500\u2500 drivers/                 # JARs dos drivers JDBC\n\u2502       \u251c\u2500\u2500 mssql-jdbc-12.4.2.jre11.jar\n\u2502       \u251c\u2500\u2500 postgresql-42.7.0.jar\n\u2502       \u2514\u2500\u2500 mysql-connector-j-8.2.0.jar\n\u251c\u2500\u2500 src/\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#configuracao-de-docker","title":"Configura\u00e7\u00e3o de Docker","text":"<p>docker-compose.yml para desenvolvimento: <pre><code>version: '3.8'\nservices:\n  capy-migrations:\n    image: liquibase/liquibase:latest\n    volumes:\n      - ./db/changelog:/liquibase/changelog\n      - ./db/drivers:/liquibase/drivers\n    environment:\n      - LIQUIBASE_COMMAND_URL=jdbc:sqlserver://sqlserver:1433;databaseName=MyApp\n      - LIQUIBASE_COMMAND_USERNAME=sa\n      - LIQUIBASE_COMMAND_PASSWORD=MyPassword123\n      - LIQUIBASE_COMMAND_CHANGELOG_FILE=changelog/db.changelog-master.yaml\n</code></pre></p> <p>Uso com Docker: <pre><code># Todos os comandos suportam --docker\ncap status --defaults ./db/changelog/liquibase.properties --docker\ncap apply --defaults ./db/changelog/liquibase.properties --docker\ncap plan --defaults ./db/changelog/liquibase.properties --docker --output plan.sql\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":""},{"location":"CAPY-CLI-GUIDE/#problemas-comuns","title":"Problemas Comuns","text":""},{"location":"CAPY-CLI-GUIDE/#1-emojis-nao-aparecem-no-terminal","title":"1. Emojis n\u00e3o aparecem no terminal","text":"<p>Solu\u00e7\u00e3o autom\u00e1tica: O CapyDb CLI agora configura UTF-8 automaticamente</p> <p>Solu\u00e7\u00e3o manual (Windows): <pre><code># No Command Prompt\nchcp 65001\n\n# No PowerShell\n[Console]::OutputEncoding = [System.Text.Encoding]::UTF8\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#2-java-nao-encontrado","title":"2. Java n\u00e3o encontrado","text":"<pre><code># Verificar se Java est\u00e1 instalado\njava -version\n\n# Se n\u00e3o estiver, instalar OpenJDK 8+\n# Windows: https://adoptium.net/\n# Linux: sudo apt install openjdk-11-jre\n# Mac: brew install openjdk@11\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#3-liquibase-nao-encontrado","title":"3. Liquibase n\u00e3o encontrado","text":"<p>Op\u00e7\u00e3o 1: Usar Docker (recomendado) <pre><code># Instalar Docker Desktop\n# Usar --docker em todos os comandos\ncap doctor --docker\n</code></pre></p> <p>Op\u00e7\u00e3o 2: Instalar Liquibase CLI <pre><code># Windows (Chocolatey)\nchoco install liquibase\n\n# Mac (Homebrew)\nbrew install liquibase\n\n# Linux\n# Baixar de https://www.liquibase.org/download\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#4-drivers-jdbc-nao-encontrados","title":"4. Drivers JDBC n\u00e3o encontrados","text":"<pre><code># Criar diret\u00f3rio\nmkdir -p db/drivers\n\n# Baixar drivers necess\u00e1rios:\n# SQL Server: https://docs.microsoft.com/en-us/sql/connect/jdbc/download-microsoft-jdbc-driver-for-sql-server\n# PostgreSQL: https://jdbc.postgresql.org/download.html\n# MySQL: https://dev.mysql.com/downloads/connector/j/\n\n# Copiar .jar para db/drivers/\ncp mssql-jdbc-*.jar db/drivers/\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#5-erro-de-conexao-com-banco","title":"5. Erro de conex\u00e3o com banco","text":"<pre><code># Verificar conectividade\ncap doctor --defaults ./db/changelog/liquibase.properties\n\n# Verificar configura\u00e7\u00f5es no liquibase.properties\n# - url correto\n# - username/password v\u00e1lidos\n# - banco existe\n# - firewall permite conex\u00e3o\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#6-migration-duplicada","title":"6. Migration duplicada","text":"<pre><code># Verificar conflitos no master\ncat db/changelog/db.changelog-master.yaml\n\n# Se necess\u00e1rio, usar merge\ncap migrations mergeschemas --scope common\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#logs-e-debug","title":"Logs e Debug","text":""},{"location":"CAPY-CLI-GUIDE/#habilitar-modo-debug","title":"Habilitar modo debug","text":"<pre><code># Vari\u00e1vel de ambiente para debug detalhado\nexport CAPY_DEBUG=true  # Linux/Mac\nset CAPY_DEBUG=true     # Windows\n\n# Executar comando\ncap plan --defaults ./db/changelog/liquibase.properties\n</code></pre> <p>Output com debug: <pre><code>[DEBUG] Command: liquibase --defaultsFile=\"./db/changelog/liquibase.properties\" updateSQL\n[DEBUG] WorkDir: /caminho/do/projeto\n[DEBUG] ExitCode: 0\n\n-- Liquibase output aqui --\n</code></pre></p>"},{"location":"CAPY-CLI-GUIDE/#verificar-logs-do-liquibase","title":"Verificar logs do Liquibase","text":"<pre><code># Salvar output em arquivo\ncap apply --defaults ./db/changelog/liquibase.properties --output apply.log\n\n# Ver logs detalhados\ncap validate --defaults ./db/changelog/liquibase.properties --output validation.log\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#exemplos-de-workflows","title":"\ud83d\udcda Exemplos de Workflows","text":""},{"location":"CAPY-CLI-GUIDE/#workflow-de-desenvolvimento","title":"Workflow de Desenvolvimento","text":"<pre><code># 1. Criar nova migration\ncap migrations add adicionar-tabela-produtos --author \"Jo\u00e3o Silva\"\n\n# 2. Editar arquivo gerado\n# db/changelog/common/20250923_120000__adicionar-tabela-produtos.yaml\n\n# 3. Verificar plano\ncap plan --defaults ./db/changelog/liquibase.properties --output plan.sql\n\n# 4. Aplicar em desenvolvimento\ncap apply --defaults ./db/changelog/liquibase.properties\n\n# 5. Verificar status\ncap status --defaults ./db/changelog/liquibase.properties\n\n# 6. Criar tag para release\ncap tag v1.2.0 --defaults ./db/changelog/liquibase.properties\n\n# 7. Se necess\u00e1rio, remover tag antiga\ncap remove-tag v1.1.0 --defaults ./db/changelog/liquibase.properties\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#workflow-de-cicd","title":"Workflow de CI/CD","text":"<pre><code># Em build pipeline\nexport CAPY_AUTHOR=\"$CI_COMMIT_AUTHOR\"\n\n# Verificar pr\u00e9-requisitos\ncap doctor --defaults ./db/changelog/liquibase.properties\n\n# Gerar plano para review\ncap plan --defaults ./db/changelog/liquibase.properties --output artifacts/plan.sql\n\n# Em deploy pipeline\ncap apply --defaults ./db/changelog/liquibase.properties\n\n# Criar tag de deploy\ncap tag \"deploy-$(date +%Y%m%d-%H%M%S)\" --defaults ./db/changelog/liquibase.properties\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#workflow-de-migracao-de-ef-core","title":"Workflow de Migra\u00e7\u00e3o de EF Core","text":"<pre><code># 1. Compilar projeto EF\ndotnet build MyApp.sln\n\n# 2. Importar migration espec\u00edfica\ncap migrations import-ef \\\n  --assembly ./MyApp/bin/Debug/net8.0/MyApp.dll \\\n  --name AddProductsTable \\\n  --provider sqlserver \\\n  --author \"Maria Santos\"\n\n# 3. Verificar resultado\ncat db/changelog/common/20250923_*__addproductstable.yaml\n\n# 4. Testar em desenvolvimento\ncap apply --defaults ./db/changelog/liquibase.properties\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#workflow-de-conversao-de-dados","title":"Workflow de Convers\u00e3o de Dados","text":"<pre><code># 1. Exportar dados de tabela existente (exemplo PostgreSQL)\npsql -d mydb -c \"COPY usuarios TO '/tmp/usuarios.sql' WITH (FORMAT text)\"\n\n# 2. Ou criar arquivo SQL manualmente\ncat &gt; seed-data.sql &lt;&lt; EOF\nINSERT INTO usuarios (id, nome, email) VALUES (1, 'Admin', 'admin@email.com');\nINSERT INTO usuarios (id, nome, email) VALUES (2, 'User', 'user@email.com');\nEOF\n\n# 3. Converter para formato Liquibase\ncap convert-inserts \\\n  --input ./seed-data.sql \\\n  --output ./db/changelog/common/20250930__seed-usuarios.yaml \\\n  --author \"Sistema\"\n\n# 4. Adicionar ao master\n# (editar db.changelog-master.yaml)\n\n# 5. Aplicar seed data\ncap apply --defaults ./db/changelog/liquibase.properties\n\n# 6. Verificar dados\ncap status --defaults ./db/changelog/liquibase.properties\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#melhores-praticas","title":"\ud83c\udfaf Melhores Pr\u00e1ticas","text":""},{"location":"CAPY-CLI-GUIDE/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Migrations: Use kebab-case (<code>criar-tabela-usuarios</code>)</li> <li>Tags: Use semantic versioning (<code>v1.2.0</code>) ou timestamp (<code>deploy-20250923-1200</code>)</li> <li>Autores: Nome completo ou username consistente</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#organizacao-de-arquivos","title":"Organiza\u00e7\u00e3o de Arquivos","text":"<ul> <li>Common: Mudan\u00e7as port\u00e1veis entre SGBDs</li> <li>Espec\u00edficos: SQL espec\u00edfico por banco quando necess\u00e1rio</li> <li>Archive: Manter hist\u00f3rico ap\u00f3s squash</li> <li>Drivers: Vers\u00f5es compat\u00edveis e atualizadas</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#seguranca","title":"Seguran\u00e7a","text":"<ul> <li>Nunca commitar senhas em <code>liquibase.properties</code></li> <li>Usar vari\u00e1veis de ambiente para credenciais</li> <li>Configurar <code>.gitignore</code> adequadamente:</li> </ul> <pre><code># Credentials\ndb/changelog/liquibase.properties\n*.secret\n\n# Temporary files\n*.log\nplan*.sql\ndrift-report*.xml\n</code></pre>"},{"location":"CAPY-CLI-GUIDE/#performance","title":"Performance","text":"<ul> <li>Fazer squash periodicamente para manter hist\u00f3rico limpo</li> <li>Usar contexts e labels para ambientes espec\u00edficos</li> <li>Monitorar tamanho do changelog master</li> </ul> <p>Documenta\u00e7\u00e3o gerada para CapyDb CLI v1.2.3 \u00daltima atualiza\u00e7\u00e3o: 2025-10-27</p>"},{"location":"CAPY-CLI-GUIDE/#novidades-na-v123","title":"\ud83c\udd95 Novidades na v1.2.3","text":""},{"location":"CAPY-CLI-GUIDE/#data-seeding-e-gerenciamento-de-dados","title":"Data Seeding e Gerenciamento de Dados","text":"<ul> <li>\u2705 Comando <code>cap carga from-csv</code> - Gera\u00e7\u00e3o autom\u00e1tica de changesets a partir de CSV</li> <li>\u2705 Infer\u00eancia Inteligente de Tipos - Detecta automaticamente UUID, BOOLEAN, TIMESTAMP, NUMERIC, STRING</li> <li>\u2705 Resolu\u00e7\u00e3o Autom\u00e1tica de Depend\u00eancias - Detecta FKs dos cabe\u00e7alhos CSV e ordena tabelas automaticamente</li> <li>\u2705 Ordena\u00e7\u00e3o Topol\u00f3gica - Ordena\u00e7\u00e3o inteligente previne viola\u00e7\u00f5es de FK durante carga de dados</li> <li>\u2705 Detec\u00e7\u00e3o de Depend\u00eancias Circulares - Alerta sobre refer\u00eancias circulares entre tabelas</li> <li>\u2705 Comandos de Gerenciamento - update, drop-all, reset, rollback, status para dados</li> <li>\u2705 Filtragem por Label - Usa label <code>data-seed</code> para opera\u00e7\u00f5es espec\u00edficas</li> <li>\u2705 Auto-add to Master - Op\u00e7\u00e3o para adicionar automaticamente ao master changelog</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#melhorias-no-pacote","title":"Melhorias no Pacote","text":"<ul> <li>\u2705 Depend\u00eancias Embutidas - CapyDb.Core, Runner e Writers agora fazem parte do CLI</li> <li>\u2705 Pacote NuGet Limpo - Sem depend\u00eancias externas listadas</li> <li>\u2705 Multi-target Completo - Suporte total para .NET 8.0 e .NET 9.0</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#versoes-anteriores-v107","title":"Vers\u00f5es Anteriores (v1.0.7)","text":"<ul> <li>\u2705 Busca Recursiva Aprimorada - O sistema agora busca <code>liquibase.properties</code> em m\u00faltiplos locais automaticamente</li> <li>\u2705 Suporte Completo a Windows - Corrigidos problemas com padr\u00f5es glob no Windows</li> <li>\u2705 Suporte a Monorepos - Funciona perfeitamente com estruturas complexas (<code>apps/*/</code>, <code>src/*/</code>)</li> <li>\u2705 Detec\u00e7\u00e3o Inteligente de Assemblies - Melhor suporte para EF Core em projetos grandes</li> <li>\u2705 Multiplataforma - Testado e validado no Windows, Linux e macOS</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#resumo-de-comandos","title":"\ud83d\udcd1 Resumo de Comandos","text":""},{"location":"CAPY-CLI-GUIDE/#migrations_1","title":"Migrations","text":"<ul> <li><code>cap migrations add &lt;nome&gt;</code> - Criar nova migration</li> <li><code>cap migrations import-ef</code> - Importar do EF Core</li> <li><code>cap migrations mergeschemas</code> - Consolidar migrations</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#operacoes-de-banco_1","title":"Opera\u00e7\u00f5es de Banco","text":"<ul> <li><code>cap plan</code> - Gerar plano SQL</li> <li><code>cap apply</code> - Aplicar migrations</li> <li><code>cap status</code> - Ver status</li> <li><code>cap validate</code> - Validar changelog</li> <li><code>cap tag &lt;nome&gt;</code> - Criar tag</li> <li><code>cap remove-tag &lt;tag&gt;</code> - Remover tag</li> <li><code>cap rollback count &lt;N&gt;</code> - Reverter N migrations</li> <li><code>cap rollback to-tag &lt;tag&gt;</code> - Reverter at\u00e9 tag</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#data-seeding-carga-de-dados_1","title":"Data Seeding (Carga de Dados)","text":"<ul> <li><code>cap carga from-csv</code> - Gerar changelog a partir de CSV</li> <li><code>cap carga update</code> - Aplicar dados de seed (label: data-seed)</li> <li><code>cap carga drop-all</code> - Remover e reaplicar dados</li> <li><code>cap carga reset</code> - Reset completo (schema + dados)</li> <li><code>cap carga rollback</code> - Reverter \u00faltimo changeset de dados</li> <li><code>cap carga status</code> - Ver status dos dados de seed</li> </ul>"},{"location":"CAPY-CLI-GUIDE/#utilitarios_1","title":"Utilit\u00e1rios","text":"<ul> <li><code>cap doctor</code> - Verificar pr\u00e9-requisitos</li> <li><code>cap drift detect</code> - Detectar diverg\u00eancias</li> <li><code>cap squash --tag &lt;tag&gt;</code> - Consolidar hist\u00f3rico</li> <li><code>cap convert-inserts</code> - Converter INSERTs SQL</li> <li><code>cap bye</code> - Despedida</li> </ul>"},{"location":"SETUP-INICIAL/","title":"Setup Inicial do CapyDb","text":"<p>Guia passo-a-passo para configurar o CapyDb pela primeira vez</p>"},{"location":"SETUP-INICIAL/#pre-requisitos","title":"\ud83d\udccb Pr\u00e9-requisitos","text":"<p>Antes de come\u00e7ar, voc\u00ea precisa ter:</p> <ul> <li>\u2705 Java 8+ instalado</li> <li>\u2705 Banco de dados (SQL Server, PostgreSQL ou MySQL)</li> <li>\u2705 CapyDb CLI instalado (<code>cap --version</code> deve funcionar)</li> </ul>"},{"location":"SETUP-INICIAL/#passo-1-configurar-liquibaseproperties","title":"\ud83d\udd27 Passo 1: Configurar liquibase.properties","text":""},{"location":"SETUP-INICIAL/#opcao-a-usar-arquivo-criado-automaticamente","title":"Op\u00e7\u00e3o A: Usar arquivo criado automaticamente","text":"<p>O CapyDb j\u00e1 criou um arquivo de exemplo em <code>db/changelog/liquibase.properties</code>.</p> <p>Edite este arquivo e ajuste as configura\u00e7\u00f5es:</p> <pre><code># ALTERE ESTAS CONFIGURA\u00c7\u00d5ES PARA SEU AMBIENTE:\n\n# URL do seu banco (ajuste servidor, porta e nome do banco)\nurl=jdbc:sqlserver://localhost:1433;databaseName=MeuBancoDados;trustServerCertificate=true\n\n# Suas credenciais\nusername=sa\npassword=SuaSenhaAqui\n</code></pre>"},{"location":"SETUP-INICIAL/#opcao-b-configuracoes-por-tipo-de-banco","title":"Op\u00e7\u00e3o B: Configura\u00e7\u00f5es por tipo de banco","text":""},{"location":"SETUP-INICIAL/#sql-server","title":"\ud83d\udd37 SQL Server","text":"<pre><code>url=jdbc:sqlserver://localhost:1433;databaseName=MeuBanco;trustServerCertificate=true\nusername=sa\npassword=MinhaSenh@123\nchangeLogFile=db.changelog-master.yaml\nlogLevel=INFO\ncontexts=common\n</code></pre>"},{"location":"SETUP-INICIAL/#postgresql","title":"\ud83d\udc18 PostgreSQL","text":"<pre><code>url=jdbc:postgresql://localhost:5432/meubanco\nusername=postgres\npassword=MinhaSenh@123\nchangeLogFile=db.changelog-master.yaml\nlogLevel=INFO\ncontexts=common\n</code></pre>"},{"location":"SETUP-INICIAL/#mysql","title":"\ud83d\udc2c MySQL","text":"<pre><code>url=jdbc:mysql://localhost:3306/meubanco?useSSL=false&amp;allowPublicKeyRetrieval=true\nusername=root\npassword=MinhaSenh@123\nchangeLogFile=db.changelog-master.yaml\nlogLevel=INFO\ncontexts=common\n</code></pre>"},{"location":"SETUP-INICIAL/#passo-2-testar-configuracao","title":"\ud83d\udd27 Passo 2: Testar Configura\u00e7\u00e3o","text":"<pre><code># Verificar se tudo est\u00e1 configurado corretamente\ncap doctor --defaults db/changelog/liquibase.properties\n</code></pre> <p>Resultado esperado: <pre><code>\ud83e\ude7a CapyDb Doctor - Verificando pr\u00e9-requisitos...\n\n\u2705 Java: java version \"17.0.7\" 2023-04-18 LTS\n\u26a0\ufe0f  Docker: N\u00e3o dispon\u00edvel (opcional)\n\u2705 Defaults: Arquivo db/changelog/liquibase.properties existe\n\u2705 Banco: Conex\u00e3o OK\n\n\u2705 Todos os pr\u00e9-requisitos est\u00e3o OK!\n</code></pre></p>"},{"location":"SETUP-INICIAL/#se-der-erro-de-conexao","title":"Se der erro de conex\u00e3o:","text":"<ol> <li>Verifique se o banco est\u00e1 rodando</li> <li>Confirme as credenciais (username/password)</li> <li>Teste a URL (servidor, porta, nome do banco)</li> <li>Verifique firewall/rede</li> </ol>"},{"location":"SETUP-INICIAL/#opcao-alternativa-usar-docker","title":"\ud83d\udc33 Op\u00e7\u00e3o Alternativa: Usar Docker","text":"<p>Se voc\u00ea n\u00e3o quiser instalar Liquibase/drivers localmente:</p> <pre><code># Todos os comandos funcionam com --docker\ncap doctor --defaults db/changelog/liquibase.properties --docker\ncap status --defaults db/changelog/liquibase.properties --docker\ncap apply --defaults db/changelog/liquibase.properties --docker\n</code></pre> <p>Pr\u00e9-requisito: Docker Desktop instalado</p>"},{"location":"SETUP-INICIAL/#passo-3-criar-sua-primeira-migration","title":"\ud83d\udcdd Passo 3: Criar sua primeira migration","text":"<pre><code># Criar nova migration\ncap migrations add minha-primeira-migration\n\n# Ver o que foi criado\ncat db/changelog/common/20*__minha-primeira-migration.yaml\n</code></pre> <p>Edite o arquivo e adicione suas mudan\u00e7as:</p> <pre><code>databaseChangeLog:\n  - changeSet:\n      id: 20250923_120000-minha-primeira-migration\n      author: Seu Nome\n      context: common\n      changes:\n        - createTable:\n            tableName: usuarios\n            columns:\n              - column:\n                  name: id\n                  type: BIGINT\n                  autoIncrement: true\n                  constraints:\n                    primaryKey: true\n                    nullable: false\n              - column:\n                  name: nome\n                  type: VARCHAR(100)\n                  constraints:\n                    nullable: false\n              - column:\n                  name: email\n                  type: VARCHAR(255)\n                  constraints:\n                    nullable: false\n                    unique: true\n</code></pre>"},{"location":"SETUP-INICIAL/#passo-4-testar-a-migration","title":"\ud83d\udd0d Passo 4: Testar a migration","text":"<pre><code># Ver o que ser\u00e1 executado (sem aplicar)\ncap plan --defaults db/changelog/liquibase.properties --output plano.sql\n\n# Ver o arquivo gerado\ncat plano.sql\n\n# Se estiver tudo OK, aplicar\ncap apply --defaults db/changelog/liquibase.properties\n\n# Verificar status\ncap status --defaults db/changelog/liquibase.properties\n</code></pre>"},{"location":"SETUP-INICIAL/#estrutura-final","title":"\ud83c\udfaf Estrutura Final","text":"<p>Ap\u00f3s o setup, voc\u00ea ter\u00e1:</p> <pre><code>db/\n\u251c\u2500\u2500 changelog/\n\u2502   \u251c\u2500\u2500 common/\n\u2502   \u2502   \u2514\u2500\u2500 20250923_120000__minha-primeira-migration.yaml\n\u2502   \u251c\u2500\u2500 db.changelog-master.yaml        # \u2705 J\u00e1 existe\n\u2502   \u251c\u2500\u2500 liquibase.properties           # \u2705 Configurado\n\u2502   \u2514\u2500\u2500 liquibase.properties.example   # \ud83d\udcdd Refer\u00eancia\n\u2514\u2500\u2500 drivers/                            # \ud83d\udce6 Opcional (se n\u00e3o usar Docker)\n</code></pre>"},{"location":"SETUP-INICIAL/#proximos-passos","title":"\ud83d\udee0\ufe0f Pr\u00f3ximos Passos","text":""},{"location":"SETUP-INICIAL/#para-desenvolvimento","title":"Para Desenvolvimento:","text":"<pre><code># Configurar autor autom\u00e1tico\ngit config user.name \"Seu Nome Completo\"\n\n# Criar migrations conforme necess\u00e1rio\ncap migrations add adicionar-tabela-produtos\ncap migrations add ajustar-indices-performance\n</code></pre>"},{"location":"SETUP-INICIAL/#para-producao","title":"Para Produ\u00e7\u00e3o:","text":"<pre><code># Sempre gerar plano primeiro\ncap plan --defaults liquibase.properties --output plano-producao.sql\n\n# Revisar plano antes de aplicar\ncat plano-producao.sql\n\n# Aplicar em produ\u00e7\u00e3o\ncap apply --defaults liquibase.properties\n\n# Criar tag de vers\u00e3o\ncap tag v1.0.0 --defaults liquibase.properties\n</code></pre>"},{"location":"SETUP-INICIAL/#para-cicd","title":"Para CI/CD:","text":"<pre><code># Em pipelines, usar vari\u00e1vel de ambiente para autor\nexport CAPY_AUTHOR=\"CI/CD Pipeline\"\n\n# Validar antes de deploy\ncap doctor --defaults liquibase.properties --docker\ncap plan --defaults liquibase.properties --docker --output plano-ci.sql\n</code></pre>"},{"location":"SETUP-INICIAL/#seguranca","title":"\u2757 Seguran\u00e7a","text":""},{"location":"SETUP-INICIAL/#nunca-commitar-senhas","title":"NUNCA commitar senhas!","text":"<p>Adicione ao <code>.gitignore</code>: <pre><code># Configura\u00e7\u00f5es com credenciais\ndb/changelog/liquibase.properties\n\n# Logs e arquivos tempor\u00e1rios\n*.log\nplano*.sql\ndrift-report*.xml\n</code></pre></p>"},{"location":"SETUP-INICIAL/#use-variaveis-de-ambiente-em-producao","title":"Use vari\u00e1veis de ambiente em produ\u00e7\u00e3o:","text":"<pre><code># Em vez de senha no arquivo\nurl=jdbc:sqlserver://localhost:1433;databaseName=${DB_NAME};trustServerCertificate=true\nusername=${DB_USER}\npassword=${DB_PASSWORD}\n</code></pre>"},{"location":"SETUP-INICIAL/#problemas-comuns","title":"\ud83c\udd98 Problemas Comuns","text":""},{"location":"SETUP-INICIAL/#java-nao-encontrado","title":"Java n\u00e3o encontrado","text":"<pre><code># Verificar instala\u00e7\u00e3o\njava -version\n\n# Se n\u00e3o tiver, instalar (Windows)\n# Baixar de: https://adoptium.net/\n</code></pre>"},{"location":"SETUP-INICIAL/#banco-nao-conecta","title":"Banco n\u00e3o conecta","text":"<pre><code># Testar conex\u00e3o manual\n# SQL Server: verificar se SQL Server est\u00e1 rodando\n# PostgreSQL: verificar se servi\u00e7o postgres est\u00e1 ativo\n# MySQL: verificar se mysqld est\u00e1 rodando\n</code></pre>"},{"location":"SETUP-INICIAL/#drivers-nao-encontrados","title":"Drivers n\u00e3o encontrados","text":"<pre><code># Op\u00e7\u00e3o 1: Usar Docker (recomendado)\ncap status --defaults liquibase.properties --docker\n\n# Op\u00e7\u00e3o 2: Baixar drivers\n# SQL Server: https://docs.microsoft.com/en-us/sql/connect/jdbc/\n# PostgreSQL: https://jdbc.postgresql.org/download.html\n# MySQL: https://dev.mysql.com/downloads/connector/j/\n</code></pre> <p>\ud83c\udf89 Pronto! Agora voc\u00ea est\u00e1 com o CapyDb configurado e funcionando!</p> <p>Para refer\u00eancia completa, consulte: <code>CAPY-CLI-GUIDE.md</code></p>"},{"location":"en/","title":"CapyDb CLI","text":"<p>A command-line tool for managing database migrations with Liquibase and Entity Framework Core.</p>"},{"location":"en/#what-is-capydb","title":"\ud83d\ude80 What is CapyDb?","text":"<p>CapyDb CLI addresses the challenge of managing database migrations consistently and efficiently, offering:</p> <ul> <li>\u2705 Automatic configuration detection - automatically searches for <code>liquibase.properties</code></li> <li>\u2705 Migration creation in Liquibase YAML format</li> <li>\u2705 Migration import from Entity Framework Core</li> <li>\u2705 Schema merge and consolidation automation</li> <li>\u2705 Safe execution with SQL execution plans</li> <li>\u2705 Multi-DBMS support (SQL Server, PostgreSQL, MySQL, Oracle)</li> <li>\u2705 Docker integration and CI/CD pipelines</li> <li>\u2705 Drift detection - identifies undocumented changes</li> <li>\u2705 Tag system - create and remove tags for versioning</li> <li>\u2705 Smart rollback - revert by count or to a specific tag</li> <li>\u2705 History squash - consolidates old migrations</li> <li>\u2705 Automatic author detection via Git/CI/CD</li> <li>\u2705 Comprehensive diagnostics with <code>cap doctor</code></li> <li>\u2705 Changelog validation before execution</li> <li>\u2705 INSERTs converter - converts SQL INSERTs to Liquibase format</li> <li>\u2705 Data seeding from CSV - automatically generates load data changesets</li> <li>\u2705 Intelligent type inference - detects column types from CSV headers</li> <li>\u2705 Data management - update, rollback, and reset seed data independently</li> </ul>"},{"location":"en/#installation","title":"\ud83d\udce6 Installation","text":""},{"location":"en/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET 8.0 SDK or higher</li> <li>Java 8+ (for Liquibase)</li> </ul>"},{"location":"en/#global-installation","title":"Global Installation","text":"<pre><code># Install via NuGet\ndotnet tool install -g capydb.cli\n\n# Verify installation\ncap --version  # 1.2.3\n</code></pre>"},{"location":"en/#getting-started","title":"\ud83c\udfc1 Getting Started","text":""},{"location":"en/#1-set-up-project","title":"1. Set Up Project","text":"<pre><code># Recommended structure\nmy-project/\n\u251c\u2500\u2500 db/\n\u2502   \u2514\u2500\u2500 changelog/\n\u2502       \u251c\u2500\u2500 common/\n\u2502       \u251c\u2500\u2500 db.changelog-master.yaml\n\u2502       \u2514\u2500\u2500 liquibase.properties  # \u2190 CLI auto-detects this!\n\u251c\u2500\u2500 src/\n\u2514\u2500\u2500 Infrastructure/  # Or any project structure\n</code></pre>"},{"location":"en/#2-check-prerequisites","title":"2. Check Prerequisites","text":"<pre><code>cap doctor\n</code></pre>"},{"location":"en/#3-create-first-migration","title":"3. Create First Migration","text":"<pre><code># Create a basic migration\ncap migrations add create-users\n\n# With specific author\ncap migrations add create-products --author \"Your Name\"\n</code></pre>"},{"location":"en/#4-import-from-entity-framework","title":"4. Import from Entity Framework","text":"<pre><code>cap migrations import-ef \\\n  --assembly ./MyApp.dll \\\n  --name CreateUsersTable \\\n  --provider sqlserver\n</code></pre>"},{"location":"en/#5-run-migrations-auto-detection","title":"5. Run Migrations (Auto-Detection!)","text":"<pre><code># CLI automatically searches in ./db/changelog/liquibase.properties\ncap plan      # Generate execution plan\ncap apply     # Apply migrations\ncap status    # Check database status\n\n# Create tag after deployment\ncap tag v1.0.0\n\n# Rollback if needed\ncap rollback count 2\ncap rollback to-tag v1.0.0\n</code></pre>"},{"location":"en/#automatic-configuration-detection-enhanced","title":"\ud83d\udca1 Automatic Configuration Detection (Enhanced!)","text":"<p>The CLI now features robust recursive search for <code>liquibase.properties</code>:</p> <p>Search Priority: 1. <code>./db/changelog/liquibase.properties</code> (recommended) 2. <code>./liquibase.properties</code> (root directory) 3. <code>./config/liquibase.properties</code> 4. <code>./database/liquibase.properties</code> 5. <code>./src/*/db/changelog/liquibase.properties</code> (monorepos!) 6. <code>./apps/*/db/changelog/liquibase.properties</code> (monorepos!) 7. Recursive search in all subdirectories (excluding node_modules, .git)</p> <p>Works perfectly on Windows, Linux, and macOS!</p> <pre><code># Before (still works):\ncap apply --defaults ./db/changelog/liquibase.properties\n\n# Now (even simpler):\ncap apply  # Auto-detects in monorepos, nested structures, anywhere!\n</code></pre>"},{"location":"en/#quick-examples","title":"\ud83d\udccb Quick Examples","text":""},{"location":"en/#recommended-project-structure","title":"Recommended Project Structure","text":"<pre><code>my-project/\n\u251c\u2500\u2500 db/\n\u2502   \u251c\u2500\u2500 changelog/\n\u2502   \u2502   \u251c\u2500\u2500 common/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 20250924_120000__create-users.yaml\n\u2502   \u2502   \u251c\u2500\u2500 db.changelog-master.yaml\n\u2502   \u2502   \u2514\u2500\u2500 liquibase.properties  # \u2190 Auto-detected!\n\u2502   \u2514\u2500\u2500 drivers/\n\u2514\u2500\u2500 src/\n</code></pre>"},{"location":"en/#auto-generated-migration","title":"Auto-Generated Migration","text":"<pre><code># db/changelog/common/20250924_120000__create-users.yaml\ndatabaseChangeLog:\n  - changeSet:\n      id: 20250924_120000-create-users\n      author: Mois\u00e9s Drumand  # \u2190 Detected via Git!\n      context: common\n      changes:\n        - createTable:\n            tableName: users\n            columns:\n              - column:\n                  name: id\n                  type: int\n                  constraints:\n                    primaryKey: true\n</code></pre>"},{"location":"en/#simplified-full-workflow","title":"Simplified Full Workflow","text":"<pre><code># 1. Create migration\ncap migrations add create-users\n\n# 2. Review what will be executed\ncap plan\n\n# 3. Apply to database\ncap apply\n\n# 4. Check status\ncap status\n\n# 5. Create version tag\ncap tag v1.0.0\n\n# 6. Revert if needed\ncap rollback to-tag v1.0.0\n</code></pre>"},{"location":"en/#multiple-environments-and-dbms","title":"Multiple Environments and DBMS","text":"<pre><code># Default environment (auto-detected)\ncap apply\n\n# PostgreSQL with custom file\ncap apply --defaults ./db/changelog/liquibase-postgres.properties\n\n# MySQL with Docker\ncap apply --defaults ./db/changelog/liquibase-mysql.properties --docker\n\n# Oracle\ncap apply --defaults ./db/changelog/liquibase-oracle.properties\n</code></pre>"},{"location":"en/#converting-sql-inserts","title":"Converting SQL INSERTs","text":"<pre><code># Convert SQL INSERTs file to Liquibase format\ncap convert-inserts --input ./data.sql --output ./changelog.yaml\n\n# Specify table name\ncap convert-inserts --input ./data.sql --table users --output ./changelog.yaml\n</code></pre>"},{"location":"en/#data-seeding-from-csv","title":"Data Seeding from CSV","text":"<pre><code># Generate data-seed changelog from CSV\ncap carga from-csv --input db/carga/Users.csv --table Users\n\n# With author and auto-add to master changelog\ncap carga from-csv \\\n  --input db/carga/Countries.csv \\\n  --table TabelaAuxiliarCountries \\\n  --author \"Your Name\" \\\n  --add-to-master\n\n# Custom output location\ncap carga from-csv \\\n  --input db/carga/Cities.csv \\\n  --table Cities \\\n  --output db/changelog/custom/cities.yaml\n\n# Automatic dependency resolution and ordering!\n# When using --add-to-master, CapyDb automatically:\n# \u2705 Detects foreign keys from CSV column names (ending with \"Id\")\n# \u2705 Resolves table dependencies\n# \u2705 Orders changesets topologically (dependencies first)\n# \u2705 Prevents FK constraint violations during load\n\n# Apply data seeds\ncap carga update --defaults db/changelog/liquibase.properties\n\n# Rollback data seeds\ncap carga rollback --defaults db/changelog/liquibase.properties\n\n# Check data seed status\ncap carga status --defaults db/changelog/liquibase.properties\n</code></pre>"},{"location":"en/#tests","title":"\ud83e\uddea Tests","text":"<p>The project includes automated integration tests using Jest and Prisma.</p> <pre><code># Run integration tests\ncd tests/integration\nnpm install\nnpm test\n\n# Tests with different DBMS\nnpm test -- --testMatch=\"**/migration.test.ts\"\n</code></pre>"},{"location":"en/#documentation","title":"\ud83d\udcda Documentation","text":"<p>For complete documentation, visit: Documentation</p>"},{"location":"en/#main-commands","title":"\ud83d\udd27 Main Commands","text":"Command Description <code>cap doctor</code> Check prerequisites and connectivity <code>cap migrations add &lt;name&gt;</code> Create new migration with auto-detected author <code>cap migrations import-ef</code> Import migrations from EF Core <code>cap migrations mergeschemas</code> Consolidate multiple migrations <code>cap plan</code> Generate SQL execution plan <code>cap apply</code> Apply migrations to database <code>cap status</code> View database status and pending migrations <code>cap validate</code> Validate changelog syntax <code>cap drift detect</code> Detect undocumented changes <code>cap tag &lt;name&gt;</code> Create tag for versioning <code>cap remove-tag &lt;tag&gt;</code> Remove existing tag <code>cap rollback count &lt;N&gt;</code> Revert N migrations <code>cap rollback to-tag &lt;tag&gt;</code> Revert to a specific tag <code>cap squash --tag &lt;tag&gt;</code> Consolidate history up to a tag <code>cap carga from-csv</code> Generate data-seed changelog from CSV <code>cap carga update</code> Apply data seeds (label: data-seed) <code>cap carga drop-all</code> Remove all data and reapply <code>cap carga reset</code> Drop entire database and reapply all <code>cap carga rollback</code> Rollback last data changeset <code>cap carga status</code> Check data seed status <code>cap bye</code> Farewell with ASCII art \ud83e\uddab"},{"location":"en/#contact","title":"\ud83d\udcac Contact","text":"<ul> <li>\ud83d\udce7 Email: evellynloraine@gmail.com</li> <li>\ud83d\udcbc LinkedIn: Evellyn Fernandes</li> <li>\ud83d\udc31 GitHub: lor4z</li> <li>\ud83d\udcda Documentation: CapyDb Docs</li> </ul>"},{"location":"en/#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under Apache 2.0.</p>"},{"location":"en/#useful-links","title":"\ud83d\udd17 Useful Links","text":"<ul> <li>NuGet Package: https://www.nuget.org/packages/capydb.cli/</li> <li>GitHub Repository: https://github.com/lor4z/capybara-db</li> <li>Current Version: 1.2.3</li> </ul>"},{"location":"en/#whats-new-in-v123","title":"\ud83c\udd95 What's New in v1.2.3","text":""},{"location":"en/#data-seeding-features","title":"Data Seeding Features","text":"<ul> <li>\u2705 CSV to Changelog Generator - <code>cap carga from-csv</code> command</li> <li>\u2705 Intelligent Type Inference - Automatically detects UUID, BOOLEAN, TIMESTAMP, NUMERIC, STRING</li> <li>\u2705 Automatic Dependency Resolution - Detects FKs from CSV headers and orders tables automatically</li> <li>\u2705 Topological Sorting - Smart ordering prevents FK constraint violations during data load</li> <li>\u2705 Circular Dependency Detection - Warns about circular references between tables</li> <li>\u2705 Data Management Commands - update, drop-all, reset, rollback, status for seed data</li> <li>\u2705 Auto-add to Master - Option to automatically include in db.changelog-master.yaml</li> <li>\u2705 Label-based Filtering - Uses <code>data-seed</code> label for selective operations</li> </ul>"},{"location":"en/#package-improvements","title":"Package Improvements","text":"<ul> <li>\u2705 Embedded Dependencies - CapyDb.Core, Runner, and Writers are now embedded</li> <li>\u2705 No External Dependencies - Cleaner NuGet package with all DLLs included</li> <li>\u2705 Multi-target Support - Full support for .NET 8.0 and .NET 9.0</li> </ul>"},{"location":"en/#previous-features-v107","title":"Previous Features (v1.0.7)","text":"<ul> <li>\u2705 Enhanced file search on Windows - Fixed glob pattern issues</li> <li>\u2705 Robust recursive search - Finds liquibase.properties anywhere</li> <li>\u2705 Monorepo support - Works with complex project structures</li> <li>\u2705 Improved assembly detection - Better EF Core integration</li> <li>\u2705 Cross-platform compatibility - Tested on Windows, Linux, macOS</li> </ul> <p>Developed with \u2764\ufe0f to simplify database migration management.</p>"},{"location":"en/CAPY-CLI-GUIDE/","title":"CapyDb CLI \u2014 Complete Guide","text":"<p>Command-line tool to manage database migrations with Liquibase and Entity Framework Core</p>"},{"location":"en/CAPY-CLI-GUIDE/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Installation</li> <li>Core Commands</li> <li>Migrations</li> <li>Database Operations</li> <li>Utilities</li> <li>Author System</li> <li>Advanced Configuration</li> <li>Troubleshooting</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#installation","title":"\ud83d\ude80 Installation","text":""},{"location":"en/CAPY-CLI-GUIDE/#as-a-global-net-tool","title":"As a Global .NET Tool","text":"<pre><code># Build and pack\ndotnet pack src/CapyDb.Cli/CapyDb.Cli.csproj -o nupkg\n\n# Install globally\ndotnet tool install -g capydb.cli --add-source ./nupkg\n\n# Check installation\ncap --version\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#run-directly-without-installing","title":"Run Directly (without installing)","text":"<pre><code>dotnet run --project src/CapyDb.Cli -- [commands]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#core-commands","title":"\ud83d\udcd6 Core Commands","text":""},{"location":"en/CAPY-CLI-GUIDE/#general-info","title":"General Info","text":"<pre><code># CapyDb version\ncap --version\n\n# Full help\ncap --help\n\n# Check prerequisites\ncap doctor\n\n# Farewell (ASCII art)\ncap bye\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#1-create-a-new-migration","title":"1) Create a New Migration","text":"<pre><code># Basic syntax\ncap migrations add &lt;name&gt; [options]\n\n# Options:\n#   --no-stubs       : Do not create vendor-specific stub folders\n#   --author &lt;name&gt;  : Set author explicitly\n</code></pre> <p>Examples: <pre><code>cap migrations add create-users\ncap migrations add create-users --author \"John Doe\"\ncap migrations add create-users --no-stubs\ncap migrations add create-users --author \"Mary Smith\" --no-stubs\n</code></pre></p> <p>What happens: 1. \u2705 Creates a YAML file under <code>db/changelog/common/</code> 2. \u2705 Updates <code>db.changelog-master.yaml</code> 3. \u2705 Detects author automatically (or uses <code>--author</code>) 4. \u2705 Generates a unique timestamp to avoid conflicts</p> <p>Generated structure: <pre><code># db/changelog/common/20250923_014331__create-users.yaml\ndatabaseChangeLog:\n  - changeSet:\n      id: 20250923_014331-create-users\n      author: John Doe  # auto-detected\n      context: common\n      changes:\n        # Your changes here\n</code></pre></p>"},{"location":"en/CAPY-CLI-GUIDE/#2-import-a-migration-from-entity-framework","title":"2) Import a Migration from Entity Framework","text":"<pre><code>cap migrations import-ef   --assembly ./MyApp/bin/Debug/net8.0/MyApp.dll   --name CreateUsersTable   --provider sqlserver|postgres|mysql   [--author \"Your Name\"]\n</code></pre> <p>What happens: 1. \u2705 Loads the specified .NET assembly 2. \u2705 Finds the Migration class by name 3. \u2705 Executes <code>Up()</code> in-memory 4. \u2705 Converts EF operations to Liquibase YAML 5. \u2705 Saves under <code>db/changelog/common/</code></p> <p>Supported EF operations: - \u2705 <code>CreateTable</code> \u2192 <code>createTable</code> - \u2705 <code>AddColumn</code> \u2192 <code>addColumn</code> - \u2705 <code>InsertData</code> \u2192 <code>insert</code> - \u2705 <code>DeleteData</code> \u2192 <code>delete</code> - \u26a0\ufe0f Others \u2192 generic SQL with comment</p>"},{"location":"en/CAPY-CLI-GUIDE/#3-schema-merge","title":"3) Schema Merge","text":"<pre><code>cap migrations mergeschemas --scope common|mssql|postgres|mysql [--include-merged] [--delete-old]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#database-operations","title":"\ud83d\uddc3\ufe0f Database Operations","text":""},{"location":"en/CAPY-CLI-GUIDE/#1-generate-execution-plan","title":"1) Generate Execution Plan","text":"<pre><code>cap plan --defaults ./db/changelog/liquibase.properties [--docker] [--workdir DIR] [--output plan.sql]\n</code></pre> <p>Use cases: code review, audit, documentation.</p>"},{"location":"en/CAPY-CLI-GUIDE/#2-apply-migrations","title":"2) Apply Migrations","text":"<pre><code>cap apply --defaults ./db/changelog/liquibase.properties [--docker] [--workdir DIR] [--output apply.log]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#3-check-status","title":"3) Check Status","text":"<pre><code>cap status --defaults ./db/changelog/liquibase.properties [--docker]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#4-validate-changelog","title":"4) Validate Changelog","text":"<pre><code>cap validate --defaults ./db/changelog/liquibase.properties [--output validation.log]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#5-tags","title":"5) Tags","text":"<pre><code># create\ncap tag v1.0.0 --defaults ./db/changelog/liquibase.properties\n# remove\ncap remove-tag v1.0.0 --defaults ./db/changelog/liquibase.properties\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#6-rollback","title":"6) Rollback","text":"<pre><code>cap rollback count 3 --defaults ./db/changelog/liquibase.properties\ncap rollback to-tag v1.0.0 --defaults ./db/changelog/liquibase.properties\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#utilities","title":"\ud83d\udee0\ufe0f Utilities","text":""},{"location":"en/CAPY-CLI-GUIDE/#doctor-prerequisite-check","title":"Doctor \u2014 Prerequisite Check","text":"<pre><code>cap doctor [--defaults ./db/changelog/liquibase.properties]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#drift-detection","title":"Drift Detection","text":"<pre><code>cap drift detect --defaults ./db/changelog/liquibase.properties [--docker] [--workdir DIR] [--output drift-report.xml]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#squash-history-consolidation","title":"Squash \u2014 History Consolidation","text":"<pre><code>cap squash --tag v1.0.0 --defaults ./db/changelog/liquibase.properties [--docker]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#inserts-converter","title":"INSERTs Converter","text":"<pre><code>cap convert-inserts --input ./data.sql --output ./db/changelog/common/seed.yaml [--table users] [--author \"System\"]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#data-seeding-load-data-management","title":"\ud83d\udcca Data Seeding (Load Data Management)","text":""},{"location":"en/CAPY-CLI-GUIDE/#overview","title":"Overview","text":"<p>CapyDb offers a complete system to manage seed data separately from schema migrations. This enables:</p> <ul> <li>\u2705 Independent versioning of data and schema</li> <li>\u2705 Automatic changeset generation from CSV files</li> <li>\u2705 Intelligent type inference</li> <li>\u2705 Specific data rollback without affecting schema</li> <li>\u2705 Label-based filtering (<code>data-seed</code>)</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#1-generate-changelog-from-csv","title":"1. Generate Changelog from CSV","text":"<pre><code># Basic syntax\ncap carga from-csv --input &lt;file.csv&gt; --table &lt;table&gt; [options]\n\n# Required options:\n#   --input, -i &lt;path&gt;    : Path to CSV file\n#   --table, -t &lt;name&gt;    : Target table name\n\n# Additional options:\n#   --output, -o &lt;path&gt;   : YAML output file (default: db/changelog/carga-updates/YYYYMMDD__carga-&lt;table&gt;.yaml)\n#   --author &lt;name&gt;       : Author name (default: CapyDb)\n#   --context &lt;context&gt;   : Changeset context (default: common)\n#   --add-to-master       : Automatically add to db.changelog-master.yaml\n</code></pre> <p>Examples:</p> <pre><code># Basic generation\ncap carga from-csv --input db/carga/Users.csv --table Users\n\n# With all options\ncap carga from-csv \\\n  --input db/carga/Countries.csv \\\n  --table TabelaAuxiliarCountries \\\n  --author \"Evellyn Fernandes\" \\\n  --output db/changelog/carga-updates/countries.yaml \\\n  --add-to-master\n\n# Short form\ncap carga from-csv -i db/carga/Cities.csv -t Cities\n\n# Batch processing multiple files\nfor file in db/carga/*.csv; do\n  table=$(basename \"$file\" .csv)\n  cap carga from-csv -i \"$file\" -t \"$table\" --add-to-master\ndone\n</code></pre> <p>Automatic Type Inference:</p> <p>The command analyzes CSV column names and infers types automatically:</p> Name Pattern Inferred Type Examples <code>*Id</code>, <code>PublicId</code> UUID <code>Id</code>, <code>UserId</code>, <code>PublicId</code> <code>Excluido</code>, <code>Ativo</code>, <code>Is*</code>, <code>Has*</code> BOOLEAN <code>Excluido</code>, <code>Ativo</code>, <code>IsActive</code>, <code>HasPermission</code> <code>Data*</code>, <code>Date*</code>, <code>*Timestamp</code>, <code>*At</code> TIMESTAMP <code>DataCriacao</code>, <code>DateCreated</code>, <code>CreatedAt</code>, <code>UpdatedAt</code> <code>*Num</code>, <code>*Numero</code>, <code>Count</code>, <code>Quantidade</code> NUMERIC <code>CodigoNum</code>, <code>Age</code>, <code>Count</code>, <code>Quantidade</code> Others STRING <code>Name</code>, <code>Email</code>, <code>Description</code> <p>Automatic Dependency Resolution:</p> <p>CapyDb automatically detects table dependencies and orders changesets correctly:</p> <ul> <li>\u2705 Foreign Key Detection: Columns ending with <code>Id</code> (except <code>Id</code> and <code>PublicId</code>) are considered FKs</li> <li>\u2705 Name Resolution: Removes prefixes like <code>TabelaAuxiliar</code> to find referenced tables</li> <li>\u2705 Topological Sorting: Tables without dependencies are loaded first</li> <li>\u2705 Circular Dependency Detection: Detects and reports circular references</li> <li>\u2705 Intelligent Matching: Searches tables by exact name, with prefix, plural, or partial match</li> </ul> <p>Dependency Example: <pre><code>ModuloCategoria.csv has column \"ModuloId\"\n  \u2193 CapyDb detects FK to \"Modulo\"\n  \u2193 Automatically orders:\n    1. Modulo.csv           (no dependencies)\n    2. ModuloCategoria.csv  (depends on Modulo)\n</code></pre></p> <p>CSV Example: <pre><code>Id,Name,Email,IsActive,CreatedAt,Age\ncc53be96-29d4-46ec-882d-042ad26f3aa5,John Doe,john@email.com,true,2024-01-01,30\n6771123b-a632-423d-9c8a-f1ec7fd4b438,Mary Smith,mary@email.com,true,2024-01-02,25\n</code></pre></p> <p>Generated YAML: <pre><code>databaseChangeLog:\n  - changeSet:\n      id: 20251017-carga-users\n      author: CapyDb\n      context: common\n      labels: data-seed\n      changes:\n        - loadData:\n            tableName: Users\n            file: db/carga/Users.csv\n            relativeToChangelogFile: false\n            separator: \",\"\n            quotchar: '\"'\n            encoding: UTF-8\n            columns:\n              - column:\n                  name: Id\n                  type: UUID\n              - column:\n                  name: Name\n                  type: STRING\n              - column:\n                  name: Email\n                  type: STRING\n              - column:\n                  name: IsActive\n                  type: BOOLEAN\n              - column:\n                  name: CreatedAt\n                  type: TIMESTAMP\n              - column:\n                  name: Age\n                  type: NUMERIC\n      rollback:\n        - delete:\n            tableName: Users\n</code></pre></p>"},{"location":"en/CAPY-CLI-GUIDE/#2-apply-seed-data","title":"2. Apply Seed Data","text":"<pre><code># Basic syntax\ncap carga update --defaults &lt;file.properties&gt; [options]\n\n# Options:\n#   --docker          : Use Docker\n#   --workdir &lt;dir&gt;   : Working directory\n#   --output &lt;file&gt;   : Execution log\n#   --logs            : Display detailed logs\n</code></pre> <p>Examples:</p> <pre><code># Apply all changesets with 'data-seed' label\ncap carga update --defaults ./db/changelog/liquibase.properties\n\n# With detailed logs\ncap carga update --defaults ./db/changelog/liquibase.properties --logs\n\n# Using Docker\ncap carga update --defaults ./db/changelog/liquibase.properties --docker\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#3-remove-and-reapply-data-development","title":"3. Remove and Reapply Data (Development)","text":"<pre><code># Basic syntax\ncap carga drop-all --defaults &lt;file.properties&gt; [options]\n</code></pre> <p>\u26a0\ufe0f WARNING: - Removes ALL data from tables referenced in data-seed changesets - Useful for development and testing - DO NOT use in production without backup!</p>"},{"location":"en/CAPY-CLI-GUIDE/#4-complete-reset-schema-data","title":"4. Complete Reset (Schema + Data)","text":"<pre><code># Basic syntax\ncap carga reset --defaults &lt;file.properties&gt; [options]\n</code></pre> <p>\u26a0\ufe0f DANGER: - Executes <code>DROP ALL</code> on entire database - Recreates schema and data from scratch - EXTREMELY DESTRUCTIVE - Requires manual confirmation</p>"},{"location":"en/CAPY-CLI-GUIDE/#5-data-rollback","title":"5. Data Rollback","text":"<pre><code># Basic syntax\ncap carga rollback --defaults &lt;file.properties&gt; [options]\n</code></pre> <p>What happens: 1. \u2705 Identifies last changeset with <code>data-seed</code> label 2. \u2705 Executes changeset's <code>rollback</code> block 3. \u2705 Removes record from <code>DATABASECHANGELOG</code> table 4. \u2705 Allows re-applying the changeset later</p>"},{"location":"en/CAPY-CLI-GUIDE/#6-data-status","title":"6. Data Status","text":"<pre><code># View status of data changesets\ncap carga status --defaults ./db/changelog/liquibase.properties [--docker]\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#automatic-dependency-resolution","title":"Automatic Dependency Resolution","text":"<p>CapyDb CLI v1.2.3+ includes an intelligent dependency resolution system that:</p> <p>How It Works:</p> <ol> <li>Scans all changesets in <code>db/changelog/carga-updates/</code></li> <li>Reads CSV headers from each referenced file</li> <li>Detects Foreign Keys - columns ending with <code>Id</code> (except <code>Id</code> and <code>PublicId</code>)</li> <li>Resolves table names - removes prefixes like <code>TabelaAuxiliar</code></li> <li>Topologically sorts - places dependencies first</li> <li>Updates db.changelog-carga.yaml with correct order</li> </ol> <p>Matching Algorithm:</p> <pre><code>CSV Column: \"ModuloId\"\n  \u2193 Remove \"Id\" \u2192 \"Modulo\"\n  \u2193 Search for:\n    1. Exact match: \"Modulo\"\n    2. With prefix: \"TabelaAuxiliarModulo\"\n    3. Plural: \"Modulos\" or \"TabelaAuxiliarModulos\"\n    4. Partial: ends with \"Modulo\"\n  \u2193 Found: add dependency\n</code></pre> <p>Practical Example:</p> <pre><code># You have these CSVs:\n# - Modulo.csv (no FKs)\n# - ModuloCategoria.csv (has ModuloId \u2192 FK to Modulo)\n# - FundamentacoesLegais.csv (has LeisId \u2192 FK to TabelaAuxiliarLeis)\n\n# When running:\ncap carga from-csv -i db/carga/ModuloCategoria.csv -t ModuloCategoria --add-to-master\ncap carga from-csv -i db/carga/Modulo.csv -t Modulo --add-to-master\ncap carga from-csv -i db/carga/FundamentacoesLegais.csv -t FundamentacoesLegais --add-to-master\n\n# CapyDb automatically reorders in db.changelog-carga.yaml:\n#   1. Modulo (no dependencies)\n#   2. TabelaAuxiliarLeis (no dependencies)\n#   3. ModuloCategoria (depends on Modulo)\n#   4. FundamentacoesLegais (depends on Leis)\n\n# Result: zero FK constraint errors!\n</code></pre> <p>Special Case Handling:</p> <ul> <li>Dependencies not found: Yellow warning, but continues execution</li> <li>Circular dependencies: Detected and reported with error</li> <li>Multiple FKs: All are detected and considered</li> <li>Custom prefixes: System tries multiple variations</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#complete-data-seeding-workflow","title":"Complete Data Seeding Workflow","text":"<pre><code># 1. Prepare CSV\ncat &gt; db/carga/Countries.csv &lt;&lt; EOF\nId,Name,Code,Population,IsActive\n1,Brazil,BR,212000000,true\n2,United States,US,331000000,true\n3,Argentina,AR,45000000,true\nEOF\n\n# 2. Generate changelog\ncap carga from-csv \\\n  --input db/carga/Countries.csv \\\n  --table Countries \\\n  --author \"Evellyn Fernandes\" \\\n  --add-to-master\n\n# 3. Check generated file\ncat db/changelog/carga-updates/20251017__carga-countries.yaml\n\n# 4. Apply data\ncap carga update --defaults db/changelog/liquibase.properties\n\n# 5. Check status\ncap carga status --defaults db/changelog/liquibase.properties\n\n# 6. If needed, rollback\ncap carga rollback --defaults db/changelog/liquibase.properties\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#project-structure-with-data-seeding","title":"Project Structure with Data Seeding","text":"<pre><code>project/\n\u251c\u2500\u2500 db/\n\u2502   \u251c\u2500\u2500 changelog/\n\u2502   \u2502   \u251c\u2500\u2500 common/              # Schema migrations\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 20250101_120000__create-tables.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 20250102_143000__add-columns.yaml\n\u2502   \u2502   \u251c\u2500\u2500 carga-updates/       # Data seed migrations\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 20251017__carga-countries.yaml\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 20251017__carga-cities.yaml\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 20251017__carga-users.yaml\n\u2502   \u2502   \u251c\u2500\u2500 db.changelog-master.yaml\n\u2502   \u2502   \u2514\u2500\u2500 liquibase.properties\n\u2502   \u251c\u2500\u2500 carga/                   # CSV source files\n\u2502   \u2502   \u251c\u2500\u2500 Countries.csv\n\u2502   \u2502   \u251c\u2500\u2500 Cities.csv\n\u2502   \u2502   \u2514\u2500\u2500 Users.csv\n\u2502   \u2514\u2500\u2500 drivers/\n\u2514\u2500\u2500 src/\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#use-cases","title":"Use Cases","text":"<p>1. Reference Data: <pre><code># Countries, states, cities\ncap carga from-csv -i db/carga/Countries.csv -t Countries --add-to-master\ncap carga from-csv -i db/carga/States.csv -t States --add-to-master\ncap carga from-csv -i db/carga/Cities.csv -t Cities --add-to-master\ncap carga update --defaults db/changelog/liquibase.properties\n</code></pre></p> <p>2. System Configuration: <pre><code># Settings, permissions, roles\ncap carga from-csv -i db/carga/SystemConfig.csv -t SystemConfig --add-to-master\ncap carga from-csv -i db/carga/Roles.csv -t Roles --add-to-master\ncap carga update --defaults db/changelog/liquibase.properties\n</code></pre></p> <p>3. Test Data: <pre><code># Development environment\ncap carga from-csv -i db/carga/TestUsers.csv -t Users --context dev\ncap carga update --defaults db/changelog/liquibase-dev.properties\n</code></pre></p>"},{"location":"en/CAPY-CLI-GUIDE/#author-system","title":"\ud83d\udc64 Author System","text":"<p>Priority order: 1) <code>--author</code> param 2) <code>CAPY_AUTHOR</code> env var 3) <code>git config user.name</code> 4) OS env vars (<code>USER</code>, <code>USERNAME</code>, etc.) 5) Fallback: <code>capydb</code></p>"},{"location":"en/CAPY-CLI-GUIDE/#advanced-configuration","title":"\u2699\ufe0f Advanced Configuration","text":""},{"location":"en/CAPY-CLI-GUIDE/#example-liquibaseproperties","title":"Example <code>liquibase.properties</code>","text":"<pre><code>url=jdbc:sqlserver://localhost:1433;databaseName=MyApp;trustServerCertificate=true\nusername=sa\npassword=MyPassword123\nchangeLogFile=db/changelog/db.changelog-master.yaml\nclasspath=db/drivers/mssql-jdbc-12.4.2.jre11.jar\nlogLevel=INFO\ncontexts=common,production\nlabels=!test\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#suggested-project-layout","title":"Suggested Project Layout","text":"<pre><code>db/\n  changelog/\n    common/\n    mssql/\n    postgres/\n    mysql/\n    archive/\n    deleteSchemas/\n    db.changelog-master.yaml\n    liquibase.properties\n  drivers/\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#troubleshooting","title":"\ud83d\udc1b Troubleshooting","text":"<p>Liquibase via Docker <pre><code>cap doctor --docker\n</code></pre></p> <p>JDBC drivers missing <pre><code>mkdir -p db/drivers\n# Put the vendor JARs here\n</code></pre></p> <p>Connection issues - Check URL/credentials/network/firewall - Run <code>cap doctor --defaults ./db/changelog/liquibase.properties</code></p>"},{"location":"en/CAPY-CLI-GUIDE/#example-workflows","title":"\ud83d\udcda Example Workflows","text":""},{"location":"en/CAPY-CLI-GUIDE/#dev","title":"Dev","text":"<pre><code>cap migrations add add-products --author \"John Doe\"\ncap plan --defaults ./db/changelog/liquibase.properties --output plan.sql\ncap apply --defaults ./db/changelog/liquibase.properties\ncap status --defaults ./db/changelog/liquibase.properties\ncap tag v1.2.0 --defaults ./db/changelog/liquibase.properties\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#cicd","title":"CI/CD","text":"<pre><code>export CAPY_AUTHOR=\"$CI_COMMIT_AUTHOR\"\ncap doctor --defaults ./db/changelog/liquibase.properties\ncap plan --defaults ./db/changelog/liquibase.properties --output artifacts/plan.sql\ncap apply --defaults ./db/changelog/liquibase.properties\ncap tag \"deploy-$(date +%Y%m%d-%H%M%S)\" --defaults ./db/changelog/liquibase.properties\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#ef-core-migration","title":"EF Core Migration","text":"<pre><code>dotnet build MyApp.sln\ncap migrations import-ef   --assembly ./MyApp/bin/Debug/net8.0/MyApp.dll   --name AddProductsTable   --provider sqlserver   --author \"Mary Smith\"\ncat db/changelog/common/20250923_*__addproductstable.yaml\ncap apply --defaults ./db/changelog/liquibase.properties\n</code></pre>"},{"location":"en/CAPY-CLI-GUIDE/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ul> <li>Use kebab-case for migration names</li> <li>Never commit credentials; use env vars</li> <li>Periodically squash history</li> <li>Use contexts/labels per environment</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#whats-new-in-v123","title":"\ud83c\udd95 What's New in v1.2.3","text":"<p>Generated documentation for CapyDb CLI v1.2.3 Last updated: 2025-10-27</p>"},{"location":"en/CAPY-CLI-GUIDE/#data-seeding-and-data-management","title":"Data Seeding and Data Management","text":"<ul> <li>\u2705 <code>cap carga from-csv</code> Command - Automatic changeset generation from CSV files</li> <li>\u2705 Intelligent Type Inference - Automatically detects UUID, BOOLEAN, TIMESTAMP, NUMERIC, STRING</li> <li>\u2705 Automatic Dependency Resolution - Detects FKs from CSV headers and automatically orders tables</li> <li>\u2705 Topological Sorting - Smart ordering prevents FK constraint violations during data load</li> <li>\u2705 Circular Dependency Detection - Warns about circular references between tables</li> <li>\u2705 Management Commands - update, drop-all, reset, rollback, status for seed data</li> <li>\u2705 Label-based Filtering - Uses <code>data-seed</code> label for specific operations</li> <li>\u2705 Auto-add to Master - Option to automatically include in master changelog</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#package-improvements","title":"Package Improvements","text":"<ul> <li>\u2705 Embedded Dependencies - CapyDb.Core, Runner, and Writers are now part of the CLI</li> <li>\u2705 Clean NuGet Package - No external dependencies listed</li> <li>\u2705 Full Multi-target Support - Complete support for .NET 8.0 and .NET 9.0</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#previous-features-v107","title":"Previous Features (v1.0.7)","text":"<ul> <li>\u2705 Enhanced Recursive Search - System now searches for <code>liquibase.properties</code> in multiple locations automatically</li> <li>\u2705 Full Windows Support - Fixed glob pattern issues on Windows</li> <li>\u2705 Monorepo Support - Works perfectly with complex structures (<code>apps/*/</code>, <code>src/*/</code>)</li> <li>\u2705 Intelligent Assembly Detection - Better support for EF Core in large projects</li> <li>\u2705 Cross-platform - Tested and validated on Windows, Linux, and macOS</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#command-summary","title":"\ud83d\udcd1 Command Summary","text":""},{"location":"en/CAPY-CLI-GUIDE/#migrations_1","title":"Migrations","text":"<ul> <li><code>cap migrations add &lt;name&gt;</code> - Create new migration</li> <li><code>cap migrations import-ef</code> - Import from EF Core</li> <li><code>cap migrations mergeschemas</code> - Consolidate migrations</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#database-operations_1","title":"Database Operations","text":"<ul> <li><code>cap plan</code> - Generate SQL plan</li> <li><code>cap apply</code> - Apply migrations</li> <li><code>cap status</code> - View status</li> <li><code>cap validate</code> - Validate changelog</li> <li><code>cap tag &lt;name&gt;</code> - Create tag</li> <li><code>cap remove-tag &lt;tag&gt;</code> - Remove tag</li> <li><code>cap rollback count &lt;N&gt;</code> - Revert N migrations</li> <li><code>cap rollback to-tag &lt;tag&gt;</code> - Revert to tag</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#data-seeding-load-data","title":"Data Seeding (Load Data)","text":"<ul> <li><code>cap carga from-csv</code> - Generate changelog from CSV</li> <li><code>cap carga update</code> - Apply seed data (label: data-seed)</li> <li><code>cap carga drop-all</code> - Remove and reapply data</li> <li><code>cap carga reset</code> - Complete reset (schema + data)</li> <li><code>cap carga rollback</code> - Rollback last data changeset</li> <li><code>cap carga status</code> - View seed data status</li> </ul>"},{"location":"en/CAPY-CLI-GUIDE/#utilities_1","title":"Utilities","text":"<ul> <li><code>cap doctor</code> - Check prerequisites</li> <li><code>cap drift detect</code> - Detect divergences</li> <li><code>cap squash --tag &lt;tag&gt;</code> - Consolidate history</li> <li><code>cap convert-inserts</code> - Convert SQL INSERTs</li> <li><code>cap bye</code> - Farewell</li> </ul>"},{"location":"en/SETUP-INICIAL/","title":"\ud83d\ude80 CapyDb \u2014 Initial Setup","text":"<p>Step-by-step guide to configure CapyDb for the first time</p>"},{"location":"en/SETUP-INICIAL/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>\u2705 Java 8+ installed</li> <li>\u2705 Database available (SQL Server, PostgreSQL or MySQL)</li> <li>\u2705 CapyDb CLI installed (<code>cap --version</code> should work)</li> </ul>"},{"location":"en/SETUP-INICIAL/#step-1-configure-liquibaseproperties","title":"\ud83d\udd27 Step 1: Configure <code>liquibase.properties</code>","text":"<p>Edit <code>db/changelog/liquibase.properties</code> according to your environment:</p>"},{"location":"en/SETUP-INICIAL/#sql-server","title":"SQL Server","text":"<pre><code>url=jdbc:sqlserver://localhost:1433;databaseName=MyDatabase;trustServerCertificate=true\nusername=sa\npassword=YourPassword\nchangeLogFile=db.changelog-master.yaml\nlogLevel=INFO\ncontexts=common\n</code></pre>"},{"location":"en/SETUP-INICIAL/#postgresql","title":"PostgreSQL","text":"<pre><code>url=jdbc:postgresql://localhost:5432/mydatabase\nusername=postgres\npassword=YourPassword\nchangeLogFile=db.changelog-master.yaml\nlogLevel=INFO\ncontexts=common\n</code></pre>"},{"location":"en/SETUP-INICIAL/#mysql","title":"MySQL","text":"<pre><code>url=jdbc:mysql://localhost:3306/mydatabase?useSSL=false&amp;allowPublicKeyRetrieval=true\nusername=root\npassword=YourPassword\nchangeLogFile=db.changelog-master.yaml\nlogLevel=INFO\ncontexts=common\n</code></pre>"},{"location":"en/SETUP-INICIAL/#step-2-test-your-configuration","title":"\ud83d\udd27 Step 2: Test Your Configuration","text":"<pre><code>cap doctor --defaults db/changelog/liquibase.properties\n</code></pre> <p>Expected output (example): <pre><code>\ud83e\ude7a CapyDb Doctor - Checking prerequisites...\n\n\u2705 Java: java version \"17.0.7\" 2023-04-18 LTS\n\u26a0\ufe0f  Docker: Not available (optional)\n\u2705 Defaults: db/changelog/liquibase.properties exists\n\u2705 Database: Connection OK\n\n\u2705 All prerequisites are OK!\n</code></pre></p> <p>If connection fails, verify: 1) DB service is running 2) Credentials are correct 3) URL (host/port/dbname) is correct 4) Network/firewall allows access</p>"},{"location":"en/SETUP-INICIAL/#alternative-use-docker","title":"\ud83d\udc33 Alternative: Use Docker","text":"<pre><code>cap doctor --defaults db/changelog/liquibase.properties --docker\ncap status --defaults db/changelog/liquibase.properties --docker\ncap apply --defaults db/changelog/liquibase.properties --docker\n</code></pre> <p>Requirement: Docker Desktop installed</p>"},{"location":"en/SETUP-INICIAL/#step-3-create-your-first-migration","title":"\ud83d\udcdd Step 3: Create your first migration","text":"<pre><code>cap migrations add my-first-migration\n# Inspect the generated file:\ncat db/changelog/common/20*__my-first-migration.yaml\n</code></pre> <p>Edit the file and add your changes, e.g.: <pre><code>databaseChangeLog:\n  - changeSet:\n      id: 20250923_120000-my-first-migration\n      author: Your Name\n      context: common\n      changes:\n        - createTable:\n            tableName: users\n            columns:\n              - column:\n                  name: id\n                  type: BIGINT\n                  autoIncrement: true\n                  constraints:\n                    primaryKey: true\n                    nullable: false\n              - column:\n                  name: name\n                  type: VARCHAR(100)\n                  constraints:\n                    nullable: false\n              - column:\n                  name: email\n                  type: VARCHAR(255)\n                  constraints:\n                    nullable: false\n                    unique: true\n</code></pre></p>"},{"location":"en/SETUP-INICIAL/#step-4-test-and-apply","title":"\ud83d\udd0d Step 4: Test and Apply","text":"<pre><code># See what will run (without applying)\ncap plan --defaults db/changelog/liquibase.properties --output plan.sql\n\n# Review the plan\ncat plan.sql\n\n# Apply\ncap apply --defaults db/changelog/liquibase.properties\n\n# Check status\ncap status --defaults db/changelog/liquibase.properties\n</code></pre>"},{"location":"en/SETUP-INICIAL/#final-structure","title":"\ud83c\udfaf Final Structure","text":"<pre><code>db/\n\u251c\u2500 changelog/\n\u2502  \u251c\u2500 common/\n\u2502  \u2502  \u2514\u2500 20250923_120000__my-first-migration.yaml\n\u2502  \u251c\u2500 db.changelog-master.yaml\n\u2502  \u251c\u2500 liquibase.properties\n\u2502  \u2514\u2500 liquibase.properties.example\n\u2514\u2500 drivers/          # Optional if not using Docker\n</code></pre>"},{"location":"en/SETUP-INICIAL/#next-steps","title":"\ud83d\udee0\ufe0f Next Steps","text":""},{"location":"en/SETUP-INICIAL/#development","title":"Development","text":"<pre><code>git config user.name \"Your Full Name\"\ncap migrations add add-products-table\ncap migrations add tune-performance-indexes\n</code></pre>"},{"location":"en/SETUP-INICIAL/#production","title":"Production","text":"<pre><code>cap plan --defaults liquibase.properties --output plan-prod.sql\ncat plan-prod.sql\ncap apply --defaults liquibase.properties\ncap tag v1.0.0 --defaults liquibase.properties\n</code></pre>"},{"location":"en/SETUP-INICIAL/#cicd","title":"CI/CD","text":"<pre><code>export CAPY_AUTHOR=\"CI/CD Pipeline\"\ncap doctor --defaults liquibase.properties --docker\ncap plan --defaults liquibase.properties --docker --output plan-ci.sql\n</code></pre>"},{"location":"en/SETUP-INICIAL/#security","title":"\u2757 Security","text":"<p>Never commit passwords. Add to <code>.gitignore</code>: <pre><code>db/changelog/liquibase.properties\n*.log\nplan*.sql\ndrift-report*.xml\n</code></pre></p> <p>Use environment variables in production: <pre><code>url=jdbc:sqlserver://localhost:1433;databaseName=${DB_NAME};trustServerCertificate=true\nusername=${DB_USER}\npassword=${DB_PASSWORD}\n</code></pre></p> <p>Done! CapyDb is configured and running. For the complete reference, see the main guide.</p>"}]}